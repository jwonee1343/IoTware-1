
./out/zephyr/zephyr/zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 07 00 20 39 13 00 08 9b 2a 00 08 65 13 00 08     ... 9....*..e...
 8000010:	65 13 00 08 65 13 00 08 65 13 00 08 00 00 00 00     e...e...e.......
	...
 800002c:	8d 11 00 08 65 13 00 08 00 00 00 00 39 11 00 08     ....e.......9...
 800003c:	85 0f 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000050:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000060:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000070:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000080:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000090:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 80000a0:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 80000b0:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 80000c0:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 80000d0:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 80000e0:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 80000f0:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000100:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000110:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000120:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000130:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000140:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000150:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000160:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000170:	11 13 00 08 11 13 00 08 11 13 00 08 11 13 00 08     ................
 8000180:	11 13 00 08 11 13 00 08                             ........

Disassembly of section text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b96e 	b.w	800047c <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460e      	mov	r6, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468c      	mov	ip, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8081 	bne.w	80002cc <__udivmoddi4+0x114>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d945      	bls.n	800025c <__udivmoddi4+0xa4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa06 f302 	lsl.w	r3, r6, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0c03 	orr.w	ip, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6fe 	udiv	r6, ip, lr
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb0e cc16 	mls	ip, lr, r6, ip
 80001fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80001fe:	fb06 f001 	mul.w	r0, r6, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800020c:	f080 8115 	bcs.w	800043a <__udivmoddi4+0x282>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8112 	bls.w	800043a <__udivmoddi4+0x282>
 8000216:	3e02      	subs	r6, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a1b      	subs	r3, r3, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000222:	fb0e 3310 	mls	r3, lr, r0, r3
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	fb00 f101 	mul.w	r1, r0, r1
 800022e:	42a1      	cmp	r1, r4
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	193c      	adds	r4, r7, r4
 8000234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000238:	f080 8101 	bcs.w	800043e <__udivmoddi4+0x286>
 800023c:	42a1      	cmp	r1, r4
 800023e:	f240 80fe 	bls.w	800043e <__udivmoddi4+0x286>
 8000242:	3802      	subs	r0, #2
 8000244:	443c      	add	r4, r7
 8000246:	1a64      	subs	r4, r4, r1
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	2100      	movs	r1, #0
 800024e:	b11d      	cbz	r5, 8000258 <__udivmoddi4+0xa0>
 8000250:	40d4      	lsrs	r4, r2
 8000252:	2300      	movs	r3, #0
 8000254:	e9c5 4300 	strd	r4, r3, [r5]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	b902      	cbnz	r2, 8000260 <__udivmoddi4+0xa8>
 800025e:	deff      	udf	#255	; 0xff
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	2a00      	cmp	r2, #0
 8000266:	d14f      	bne.n	8000308 <__udivmoddi4+0x150>
 8000268:	1bcb      	subs	r3, r1, r7
 800026a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026e:	fa1f f887 	uxth.w	r8, r7
 8000272:	2101      	movs	r1, #1
 8000274:	fbb3 fcfe 	udiv	ip, r3, lr
 8000278:	0c26      	lsrs	r6, r4, #16
 800027a:	fb0e 331c 	mls	r3, lr, ip, r3
 800027e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8000282:	fb08 f30c 	mul.w	r3, r8, ip
 8000286:	42b3      	cmp	r3, r6
 8000288:	d907      	bls.n	800029a <__udivmoddi4+0xe2>
 800028a:	19be      	adds	r6, r7, r6
 800028c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000290:	d202      	bcs.n	8000298 <__udivmoddi4+0xe0>
 8000292:	42b3      	cmp	r3, r6
 8000294:	f200 80eb 	bhi.w	800046e <__udivmoddi4+0x2b6>
 8000298:	4684      	mov	ip, r0
 800029a:	1af6      	subs	r6, r6, r3
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb6 f0fe 	udiv	r0, r6, lr
 80002a2:	fb0e 6610 	mls	r6, lr, r0, r6
 80002a6:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002aa:	fb08 f800 	mul.w	r8, r8, r0
 80002ae:	45a0      	cmp	r8, r4
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x10a>
 80002b2:	193c      	adds	r4, r7, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x108>
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	f200 80d2 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002c0:	4618      	mov	r0, r3
 80002c2:	eba4 0408 	sub.w	r4, r4, r8
 80002c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ca:	e7c0      	b.n	800024e <__udivmoddi4+0x96>
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x12a>
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	f000 80af 	beq.w	8000434 <__udivmoddi4+0x27c>
 80002d6:	2100      	movs	r1, #0
 80002d8:	e9c5 0600 	strd	r0, r6, [r5]
 80002dc:	4608      	mov	r0, r1
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d149      	bne.n	800037e <__udivmoddi4+0x1c6>
 80002ea:	42b3      	cmp	r3, r6
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0x13c>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80bb 	bhi.w	800046a <__udivmoddi4+0x2b2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb66 0303 	sbc.w	r3, r6, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469c      	mov	ip, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0aa      	beq.n	8000258 <__udivmoddi4+0xa0>
 8000302:	e9c5 4c00 	strd	r4, ip, [r5]
 8000306:	e7a7      	b.n	8000258 <__udivmoddi4+0xa0>
 8000308:	f1c2 0320 	rsb	r3, r2, #32
 800030c:	4097      	lsls	r7, r2
 800030e:	40d8      	lsrs	r0, r3
 8000310:	4091      	lsls	r1, r2
 8000312:	40de      	lsrs	r6, r3
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	4308      	orrs	r0, r1
 800031a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800031e:	fbb6 f1fe 	udiv	r1, r6, lr
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb0e 6611 	mls	r6, lr, r1, r6
 800032a:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 800032e:	fb01 f308 	mul.w	r3, r1, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	fa04 f402 	lsl.w	r4, r4, r2
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x196>
 800033a:	19be      	adds	r6, r7, r6
 800033c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000340:	f080 808e 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 8000344:	42b3      	cmp	r3, r6
 8000346:	f240 808b 	bls.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	3902      	subs	r1, #2
 800034c:	443e      	add	r6, r7
 800034e:	1af3      	subs	r3, r6, r3
 8000350:	b286      	uxth	r6, r0
 8000352:	fbb3 f0fe 	udiv	r0, r3, lr
 8000356:	fb0e 3310 	mls	r3, lr, r0, r3
 800035a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800035e:	fb00 f308 	mul.w	r3, r0, r8
 8000362:	42b3      	cmp	r3, r6
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x1be>
 8000366:	19be      	adds	r6, r7, r6
 8000368:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800036c:	d274      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 800036e:	42b3      	cmp	r3, r6
 8000370:	d972      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000372:	3802      	subs	r0, #2
 8000374:	443e      	add	r6, r7
 8000376:	1af3      	subs	r3, r6, r3
 8000378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037c:	e77a      	b.n	8000274 <__udivmoddi4+0xbc>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	fa03 f401 	lsl.w	r4, r3, r1
 8000386:	fa22 f307 	lsr.w	r3, r2, r7
 800038a:	431c      	orrs	r4, r3
 800038c:	fa20 f907 	lsr.w	r9, r0, r7
 8000390:	fa06 f301 	lsl.w	r3, r6, r1
 8000394:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000398:	40fe      	lsrs	r6, r7
 800039a:	ea49 0903 	orr.w	r9, r9, r3
 800039e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80003a2:	fbb6 fefc 	udiv	lr, r6, ip
 80003a6:	fa1f f884 	uxth.w	r8, r4
 80003aa:	fb0c 661e 	mls	r6, ip, lr, r6
 80003ae:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80003b2:	fb0e fa08 	mul.w	sl, lr, r8
 80003b6:	45b2      	cmp	sl, r6
 80003b8:	fa02 f201 	lsl.w	r2, r2, r1
 80003bc:	fa00 f301 	lsl.w	r3, r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x21c>
 80003c2:	19a6      	adds	r6, r4, r6
 80003c4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80003c8:	d248      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003ca:	45b2      	cmp	sl, r6
 80003cc:	d946      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d2:	4426      	add	r6, r4
 80003d4:	eba6 060a 	sub.w	r6, r6, sl
 80003d8:	fa1f f989 	uxth.w	r9, r9
 80003dc:	fbb6 f0fc 	udiv	r0, r6, ip
 80003e0:	fb0c 6610 	mls	r6, ip, r0, r6
 80003e4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45b0      	cmp	r8, r6
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	19a6      	adds	r6, r4, r6
 80003f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45b0      	cmp	r8, r6
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	4426      	add	r6, r4
 8000400:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000404:	eba6 0608 	sub.w	r6, r6, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454e      	cmp	r6, r9
 800040e:	46c4      	mov	ip, r8
 8000410:	46ce      	mov	lr, r9
 8000412:	d318      	bcc.n	8000446 <__udivmoddi4+0x28e>
 8000414:	d015      	beq.n	8000442 <__udivmoddi4+0x28a>
 8000416:	b375      	cbz	r5, 8000476 <__udivmoddi4+0x2be>
 8000418:	ebb3 020c 	subs.w	r2, r3, ip
 800041c:	eb66 060e 	sbc.w	r6, r6, lr
 8000420:	fa06 f707 	lsl.w	r7, r6, r7
 8000424:	fa22 f301 	lsr.w	r3, r2, r1
 8000428:	40ce      	lsrs	r6, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	e9c5 7600 	strd	r7, r6, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e711      	b.n	8000258 <__udivmoddi4+0xa0>
 8000434:	4629      	mov	r1, r5
 8000436:	4628      	mov	r0, r5
 8000438:	e70e      	b.n	8000258 <__udivmoddi4+0xa0>
 800043a:	4666      	mov	r6, ip
 800043c:	e6ed      	b.n	800021a <__udivmoddi4+0x62>
 800043e:	4618      	mov	r0, r3
 8000440:	e701      	b.n	8000246 <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e7      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000446:	ebb8 0c02 	subs.w	ip, r8, r2
 800044a:	eb69 0404 	sbc.w	r4, r9, r4
 800044e:	3801      	subs	r0, #1
 8000450:	46a6      	mov	lr, r4
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4660      	mov	r0, ip
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78c      	b.n	8000376 <__udivmoddi4+0x1be>
 800045c:	4686      	mov	lr, r0
 800045e:	e7b9      	b.n	80003d4 <__udivmoddi4+0x21c>
 8000460:	4661      	mov	r1, ip
 8000462:	e774      	b.n	800034e <__udivmoddi4+0x196>
 8000464:	3802      	subs	r0, #2
 8000466:	443c      	add	r4, r7
 8000468:	e72b      	b.n	80002c2 <__udivmoddi4+0x10a>
 800046a:	4608      	mov	r0, r1
 800046c:	e747      	b.n	80002fe <__udivmoddi4+0x146>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443e      	add	r6, r7
 8000474:	e711      	b.n	800029a <__udivmoddi4+0xe2>
 8000476:	4629      	mov	r1, r5
 8000478:	e6ee      	b.n	8000258 <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000480:	680b      	ldr	r3, [r1, #0]
 8000482:	3301      	adds	r3, #1
 8000484:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8000486:	4b01      	ldr	r3, [pc, #4]	; (800048c <char_out+0xc>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4718      	bx	r3
 800048c:	20000000 	.word	0x20000000

08000490 <__printk_hook_install>:
	_char_out = fn;
 8000490:	4b01      	ldr	r3, [pc, #4]	; (8000498 <__printk_hook_install+0x8>)
 8000492:	6018      	str	r0, [r3, #0]
}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000000 	.word	0x20000000

0800049c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 800049c:	b507      	push	{r0, r1, r2, lr}
 800049e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80004a0:	2100      	movs	r1, #0
{
 80004a2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 80004a4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80004a6:	4803      	ldr	r0, [pc, #12]	; (80004b4 <vprintk+0x18>)
 80004a8:	a901      	add	r1, sp, #4
 80004aa:	f000 f95f 	bl	800076c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80004ae:	b003      	add	sp, #12
 80004b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80004b4:	08000481 	.word	0x08000481

080004b8 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
 80004ba:	2200      	movs	r2, #0
 80004bc:	e9c0 2200 	strd	r2, r2, [r0]
 80004c0:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 80004c2:	784a      	ldrb	r2, [r1, #1]
 80004c4:	2a25      	cmp	r2, #37	; 0x25
{
 80004c6:	4603      	mov	r3, r0
	if (*sp == '%') {
 80004c8:	d037      	beq.n	800053a <extract_conversion+0x82>
	++sp;
 80004ca:	3101      	adds	r1, #1
 80004cc:	4608      	mov	r0, r1
		switch (*sp) {
 80004ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80004d2:	2a2b      	cmp	r2, #43	; 0x2b
 80004d4:	d041      	beq.n	800055a <extract_conversion+0xa2>
 80004d6:	d833      	bhi.n	8000540 <extract_conversion+0x88>
 80004d8:	2a20      	cmp	r2, #32
 80004da:	d042      	beq.n	8000562 <extract_conversion+0xaa>
 80004dc:	2a23      	cmp	r2, #35	; 0x23
 80004de:	d044      	beq.n	800056a <extract_conversion+0xb2>
	if (conv->flag_zero && conv->flag_dash) {
 80004e0:	781a      	ldrb	r2, [r3, #0]
 80004e2:	f002 0144 	and.w	r1, r2, #68	; 0x44
 80004e6:	2944      	cmp	r1, #68	; 0x44
 80004e8:	d102      	bne.n	80004f0 <extract_conversion+0x38>
		conv->flag_zero = false;
 80004ea:	f36f 1286 	bfc	r2, #6, #1
 80004ee:	701a      	strb	r2, [r3, #0]
	conv->width_present = true;
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004f6:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
 80004f8:	7802      	ldrb	r2, [r0, #0]
 80004fa:	2a2a      	cmp	r2, #42	; 0x2a
 80004fc:	d148      	bne.n	8000590 <extract_conversion+0xd8>
		conv->width_star = true;
 80004fe:	7859      	ldrb	r1, [r3, #1]
 8000500:	f041 0101 	orr.w	r1, r1, #1
 8000504:	1c42      	adds	r2, r0, #1
 8000506:	7059      	strb	r1, [r3, #1]
	conv->prec_present = (*sp == '.');
 8000508:	7811      	ldrb	r1, [r2, #0]
 800050a:	292e      	cmp	r1, #46	; 0x2e
 800050c:	7859      	ldrb	r1, [r3, #1]
 800050e:	bf0c      	ite	eq
 8000510:	2001      	moveq	r0, #1
 8000512:	2000      	movne	r0, #0
 8000514:	f360 0141 	bfi	r1, r0, #1, #1
 8000518:	7059      	strb	r1, [r3, #1]
	if (!conv->prec_present) {
 800051a:	d142      	bne.n	80005a2 <extract_conversion+0xea>
	if (*sp == '*') {
 800051c:	7851      	ldrb	r1, [r2, #1]
 800051e:	292a      	cmp	r1, #42	; 0x2a
 8000520:	d03a      	beq.n	8000598 <extract_conversion+0xe0>
 8000522:	3201      	adds	r2, #1
	size_t val = 0;
 8000524:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 8000526:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000528:	4610      	mov	r0, r2
 800052a:	f810 4b01 	ldrb.w	r4, [r0], #1
 800052e:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000532:	2d09      	cmp	r5, #9
 8000534:	d947      	bls.n	80005c6 <extract_conversion+0x10e>
	conv->prec_value = prec;
 8000536:	6099      	str	r1, [r3, #8]
	return sp;
 8000538:	e033      	b.n	80005a2 <extract_conversion+0xea>
		conv->specifier = *sp++;
 800053a:	1c88      	adds	r0, r1, #2
 800053c:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
 8000540:	2a2d      	cmp	r2, #45	; 0x2d
 8000542:	d005      	beq.n	8000550 <extract_conversion+0x98>
 8000544:	2a30      	cmp	r2, #48	; 0x30
 8000546:	d1cb      	bne.n	80004e0 <extract_conversion+0x28>
			conv->flag_zero = true;
 8000548:	781a      	ldrb	r2, [r3, #0]
 800054a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800054e:	e002      	b.n	8000556 <extract_conversion+0x9e>
			conv->flag_dash = true;
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
 8000556:	701a      	strb	r2, [r3, #0]
			break;
 8000558:	e7b8      	b.n	80004cc <extract_conversion+0x14>
			conv->flag_plus = true;
 800055a:	781a      	ldrb	r2, [r3, #0]
 800055c:	f042 0208 	orr.w	r2, r2, #8
 8000560:	e7f9      	b.n	8000556 <extract_conversion+0x9e>
			conv->flag_space = true;
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	f042 0210 	orr.w	r2, r2, #16
 8000568:	e7f5      	b.n	8000556 <extract_conversion+0x9e>
			conv->flag_hash = true;
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	f042 0220 	orr.w	r2, r2, #32
 8000570:	e7f1      	b.n	8000556 <extract_conversion+0x9e>
		val = 10U * val + *sp++ - '0';
 8000572:	fb07 5101 	mla	r1, r7, r1, r5
 8000576:	3930      	subs	r1, #48	; 0x30
 8000578:	4622      	mov	r2, r4
 800057a:	4614      	mov	r4, r2
 800057c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000580:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000584:	2e09      	cmp	r6, #9
 8000586:	d9f4      	bls.n	8000572 <extract_conversion+0xba>
	if (sp != wp) {
 8000588:	4290      	cmp	r0, r2
		conv->width_value = width;
 800058a:	bf18      	it	ne
 800058c:	6059      	strne	r1, [r3, #4]
		if (width != conv->width_value) {
 800058e:	e7bb      	b.n	8000508 <extract_conversion+0x50>
 8000590:	4602      	mov	r2, r0
	size_t val = 0;
 8000592:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 8000594:	270a      	movs	r7, #10
 8000596:	e7f0      	b.n	800057a <extract_conversion+0xc2>
		conv->prec_star = true;
 8000598:	7859      	ldrb	r1, [r3, #1]
 800059a:	f041 0104 	orr.w	r1, r1, #4
 800059e:	7059      	strb	r1, [r3, #1]
		return ++sp;
 80005a0:	3202      	adds	r2, #2
	switch (*sp) {
 80005a2:	4611      	mov	r1, r2
 80005a4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80005a8:	286c      	cmp	r0, #108	; 0x6c
 80005aa:	d03e      	beq.n	800062a <extract_conversion+0x172>
 80005ac:	d810      	bhi.n	80005d0 <extract_conversion+0x118>
 80005ae:	2868      	cmp	r0, #104	; 0x68
 80005b0:	d016      	beq.n	80005e0 <extract_conversion+0x128>
 80005b2:	286a      	cmp	r0, #106	; 0x6a
 80005b4:	d042      	beq.n	800063c <extract_conversion+0x184>
 80005b6:	284c      	cmp	r0, #76	; 0x4c
 80005b8:	d046      	beq.n	8000648 <extract_conversion+0x190>
		conv->length_mod = LENGTH_NONE;
 80005ba:	7859      	ldrb	r1, [r3, #1]
 80005bc:	f36f 01c6 	bfc	r1, #3, #4
 80005c0:	7059      	strb	r1, [r3, #1]
		break;
 80005c2:	4611      	mov	r1, r2
 80005c4:	e015      	b.n	80005f2 <extract_conversion+0x13a>
		val = 10U * val + *sp++ - '0';
 80005c6:	fb06 4101 	mla	r1, r6, r1, r4
 80005ca:	3930      	subs	r1, #48	; 0x30
 80005cc:	4602      	mov	r2, r0
 80005ce:	e7ab      	b.n	8000528 <extract_conversion+0x70>
	switch (*sp) {
 80005d0:	2874      	cmp	r0, #116	; 0x74
 80005d2:	785c      	ldrb	r4, [r3, #1]
 80005d4:	d035      	beq.n	8000642 <extract_conversion+0x18a>
 80005d6:	287a      	cmp	r0, #122	; 0x7a
 80005d8:	d1ef      	bne.n	80005ba <extract_conversion+0x102>
		conv->length_mod = LENGTH_Z;
 80005da:	4622      	mov	r2, r4
 80005dc:	2006      	movs	r0, #6
 80005de:	e020      	b.n	8000622 <extract_conversion+0x16a>
		if (*++sp == 'h') {
 80005e0:	7850      	ldrb	r0, [r2, #1]
 80005e2:	785c      	ldrb	r4, [r3, #1]
 80005e4:	2868      	cmp	r0, #104	; 0x68
 80005e6:	d11a      	bne.n	800061e <extract_conversion+0x166>
			conv->length_mod = LENGTH_HH;
 80005e8:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 80005ea:	f361 04c6 	bfi	r4, r1, #3, #4
 80005ee:	705c      	strb	r4, [r3, #1]
			++sp;
 80005f0:	1c91      	adds	r1, r2, #2
	conv->specifier = *sp++;
 80005f2:	4608      	mov	r0, r1
 80005f4:	f810 4b01 	ldrb.w	r4, [r0], #1
 80005f8:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
 80005fa:	2c78      	cmp	r4, #120	; 0x78
 80005fc:	f200 80af 	bhi.w	800075e <extract_conversion+0x2a6>
 8000600:	2c57      	cmp	r4, #87	; 0x57
 8000602:	d82c      	bhi.n	800065e <extract_conversion+0x1a6>
 8000604:	2c41      	cmp	r4, #65	; 0x41
 8000606:	d003      	beq.n	8000610 <extract_conversion+0x158>
 8000608:	3c45      	subs	r4, #69	; 0x45
 800060a:	2c02      	cmp	r4, #2
 800060c:	f200 80a7 	bhi.w	800075e <extract_conversion+0x2a6>
		conv->specifier_cat = SPECIFIER_FP;
 8000610:	789a      	ldrb	r2, [r3, #2]
 8000612:	2104      	movs	r1, #4
 8000614:	f361 0202 	bfi	r2, r1, #0, #3
 8000618:	709a      	strb	r2, [r3, #2]
			unsupported = true;
 800061a:	2201      	movs	r2, #1
			break;
 800061c:	e07b      	b.n	8000716 <extract_conversion+0x25e>
			conv->length_mod = LENGTH_H;
 800061e:	4622      	mov	r2, r4
 8000620:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
 8000622:	f360 02c6 	bfi	r2, r0, #3, #4
 8000626:	705a      	strb	r2, [r3, #1]
 8000628:	e7e3      	b.n	80005f2 <extract_conversion+0x13a>
		if (*++sp == 'l') {
 800062a:	7850      	ldrb	r0, [r2, #1]
 800062c:	785c      	ldrb	r4, [r3, #1]
 800062e:	286c      	cmp	r0, #108	; 0x6c
 8000630:	d101      	bne.n	8000636 <extract_conversion+0x17e>
			conv->length_mod = LENGTH_LL;
 8000632:	2104      	movs	r1, #4
 8000634:	e7d9      	b.n	80005ea <extract_conversion+0x132>
			conv->length_mod = LENGTH_L;
 8000636:	4622      	mov	r2, r4
 8000638:	2003      	movs	r0, #3
 800063a:	e7f2      	b.n	8000622 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_J;
 800063c:	785a      	ldrb	r2, [r3, #1]
 800063e:	2005      	movs	r0, #5
 8000640:	e7ef      	b.n	8000622 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_T;
 8000642:	4622      	mov	r2, r4
 8000644:	2007      	movs	r0, #7
 8000646:	e7ec      	b.n	8000622 <extract_conversion+0x16a>
		conv->unsupported = true;
 8000648:	881a      	ldrh	r2, [r3, #0]
 800064a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800064e:	f022 0202 	bic.w	r2, r2, #2
 8000652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000656:	f042 0202 	orr.w	r2, r2, #2
 800065a:	801a      	strh	r2, [r3, #0]
		break;
 800065c:	e7c9      	b.n	80005f2 <extract_conversion+0x13a>
 800065e:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
 8000662:	2a20      	cmp	r2, #32
 8000664:	d87b      	bhi.n	800075e <extract_conversion+0x2a6>
 8000666:	a101      	add	r1, pc, #4	; (adr r1, 800066c <extract_conversion+0x1b4>)
 8000668:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800066c:	08000727 	.word	0x08000727
 8000670:	0800075f 	.word	0x0800075f
 8000674:	0800075f 	.word	0x0800075f
 8000678:	0800075f 	.word	0x0800075f
 800067c:	0800075f 	.word	0x0800075f
 8000680:	0800075f 	.word	0x0800075f
 8000684:	0800075f 	.word	0x0800075f
 8000688:	0800075f 	.word	0x0800075f
 800068c:	0800075f 	.word	0x0800075f
 8000690:	08000611 	.word	0x08000611
 8000694:	0800075f 	.word	0x0800075f
 8000698:	08000727 	.word	0x08000727
 800069c:	080006f1 	.word	0x080006f1
 80006a0:	08000611 	.word	0x08000611
 80006a4:	08000611 	.word	0x08000611
 80006a8:	08000611 	.word	0x08000611
 80006ac:	0800075f 	.word	0x0800075f
 80006b0:	080006f1 	.word	0x080006f1
 80006b4:	0800075f 	.word	0x0800075f
 80006b8:	0800075f 	.word	0x0800075f
 80006bc:	0800075f 	.word	0x0800075f
 80006c0:	0800075f 	.word	0x0800075f
 80006c4:	0800072d 	.word	0x0800072d
 80006c8:	08000727 	.word	0x08000727
 80006cc:	08000747 	.word	0x08000747
 80006d0:	0800075f 	.word	0x0800075f
 80006d4:	0800075f 	.word	0x0800075f
 80006d8:	08000747 	.word	0x08000747
 80006dc:	0800075f 	.word	0x0800075f
 80006e0:	08000727 	.word	0x08000727
 80006e4:	0800075f 	.word	0x0800075f
 80006e8:	0800075f 	.word	0x0800075f
 80006ec:	08000727 	.word	0x08000727
		conv->specifier_cat = SPECIFIER_SINT;
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 80006f4:	f361 0202 	bfi	r2, r1, #0, #3
 80006f8:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80006fa:	785a      	ldrb	r2, [r3, #1]
 80006fc:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000700:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
 8000702:	bf02      	ittt	eq
 8000704:	7819      	ldrbeq	r1, [r3, #0]
 8000706:	f041 0101 	orreq.w	r1, r1, #1
 800070a:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
 800070c:	2c63      	cmp	r4, #99	; 0x63
 800070e:	d12a      	bne.n	8000766 <extract_conversion+0x2ae>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000710:	3a00      	subs	r2, #0
 8000712:	bf18      	it	ne
 8000714:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
 8000716:	7819      	ldrb	r1, [r3, #0]
 8000718:	f3c1 0440 	ubfx	r4, r1, #1, #1
 800071c:	4322      	orrs	r2, r4
 800071e:	f362 0141 	bfi	r1, r2, #1, #1
 8000722:	7019      	strb	r1, [r3, #0]
	return sp;
 8000724:	e70b      	b.n	800053e <extract_conversion+0x86>
		conv->specifier_cat = SPECIFIER_UINT;
 8000726:	789a      	ldrb	r2, [r3, #2]
 8000728:	2102      	movs	r1, #2
 800072a:	e7e3      	b.n	80006f4 <extract_conversion+0x23c>
		conv->specifier_cat = SPECIFIER_PTR;
 800072c:	789a      	ldrb	r2, [r3, #2]
 800072e:	2103      	movs	r1, #3
 8000730:	f361 0202 	bfi	r2, r1, #0, #3
 8000734:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000736:	785a      	ldrb	r2, [r3, #1]
 8000738:	f002 0278 	and.w	r2, r2, #120	; 0x78
 800073c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8000740:	424a      	negs	r2, r1
 8000742:	414a      	adcs	r2, r1
 8000744:	e7e7      	b.n	8000716 <extract_conversion+0x25e>
		conv->specifier_cat = SPECIFIER_PTR;
 8000746:	789a      	ldrb	r2, [r3, #2]
 8000748:	2103      	movs	r1, #3
 800074a:	f361 0202 	bfi	r2, r1, #0, #3
 800074e:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8000750:	785a      	ldrb	r2, [r3, #1]
 8000752:	f012 0f78 	tst.w	r2, #120	; 0x78
 8000756:	bf14      	ite	ne
 8000758:	2201      	movne	r2, #1
 800075a:	2200      	moveq	r2, #0
 800075c:	e7db      	b.n	8000716 <extract_conversion+0x25e>
		conv->invalid = true;
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	f042 0201 	orr.w	r2, r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
 8000766:	2200      	movs	r2, #0
 8000768:	e7d5      	b.n	8000716 <extract_conversion+0x25e>
 800076a:	bf00      	nop

0800076c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 800076c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000770:	4682      	mov	sl, r0
 8000772:	b091      	sub	sp, #68	; 0x44
 8000774:	468b      	mov	fp, r1
 8000776:	4691      	mov	r9, r2
 8000778:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800077a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 800077c:	f899 0000 	ldrb.w	r0, [r9]
 8000780:	b908      	cbnz	r0, 8000786 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000782:	4628      	mov	r0, r5
 8000784:	e10d      	b.n	80009a2 <cbvprintf+0x236>
		if (*fp != '%') {
 8000786:	2825      	cmp	r0, #37	; 0x25
 8000788:	d009      	beq.n	800079e <cbvprintf+0x32>
			OUTC(*fp++);
 800078a:	4659      	mov	r1, fp
 800078c:	47d0      	blx	sl
 800078e:	2800      	cmp	r0, #0
 8000790:	f2c0 8107 	blt.w	80009a2 <cbvprintf+0x236>
 8000794:	f109 0301 	add.w	r3, r9, #1
 8000798:	9302      	str	r3, [sp, #8]
			OUTC('%');
 800079a:	3501      	adds	r5, #1
			break;
 800079c:	e05e      	b.n	800085c <cbvprintf+0xf0>
		} state = {
 800079e:	2218      	movs	r2, #24
 80007a0:	2100      	movs	r1, #0
 80007a2:	a80a      	add	r0, sp, #40	; 0x28
 80007a4:	f002 f9c7 	bl	8002b36 <memset>
		fp = extract_conversion(conv, sp);
 80007a8:	4649      	mov	r1, r9
 80007aa:	a80c      	add	r0, sp, #48	; 0x30
 80007ac:	f7ff fe84 	bl	80004b8 <extract_conversion>
		if (conv->width_star) {
 80007b0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
		fp = extract_conversion(conv, sp);
 80007b4:	9002      	str	r0, [sp, #8]
		if (conv->width_star) {
 80007b6:	07d9      	lsls	r1, r3, #31
 80007b8:	d51b      	bpl.n	80007f2 <cbvprintf+0x86>
			width = va_arg(ap, int);
 80007ba:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 80007be:	f1b8 0f00 	cmp.w	r8, #0
 80007c2:	da07      	bge.n	80007d4 <cbvprintf+0x68>
				conv->flag_dash = true;
 80007c4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80007c8:	f042 0204 	orr.w	r2, r2, #4
 80007cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
 80007d0:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 80007d4:	075a      	lsls	r2, r3, #29
 80007d6:	d515      	bpl.n	8000804 <cbvprintf+0x98>
			int arg = va_arg(ap, int);
 80007d8:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 80007dc:	2f00      	cmp	r7, #0
 80007de:	da14      	bge.n	800080a <cbvprintf+0x9e>
				conv->prec_present = false;
 80007e0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80007e4:	f36f 0341 	bfc	r3, #1, #1
 80007e8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 80007ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80007f0:	e00b      	b.n	800080a <cbvprintf+0x9e>
		} else if (conv->width_present) {
 80007f2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 80007f6:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80007f8:	bfb4      	ite	lt
 80007fa:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
		int width = -1;
 80007fe:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 8000802:	e7e7      	b.n	80007d4 <cbvprintf+0x68>
		} else if (conv->prec_present) {
 8000804:	079f      	lsls	r7, r3, #30
 8000806:	d5f1      	bpl.n	80007ec <cbvprintf+0x80>
			precision = conv->prec_value;
 8000808:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
 800080a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
 800080e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000810:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000814:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
 8000818:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 800081c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 800081e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000822:	d12e      	bne.n	8000882 <cbvprintf+0x116>
			switch (length_mod) {
 8000824:	1ecb      	subs	r3, r1, #3
 8000826:	2b04      	cmp	r3, #4
 8000828:	d81b      	bhi.n	8000862 <cbvprintf+0xf6>
 800082a:	e8df f003 	tbb	[pc, r3]
 800082e:	3a03      	.short	0x3a03
 8000830:	1a3a      	.short	0x1a3a
 8000832:	1a          	.byte	0x1a
 8000833:	00          	.byte	0x00
				value->sint = va_arg(ap, long);
 8000834:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
 8000838:	17d3      	asrs	r3, r2, #31
				value->uint =
 800083a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 800083e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000842:	f013 0603 	ands.w	r6, r3, #3
 8000846:	d04f      	beq.n	80008e8 <cbvprintf+0x17c>
			OUTS(sp, fp);
 8000848:	9b02      	ldr	r3, [sp, #8]
 800084a:	464a      	mov	r2, r9
 800084c:	4659      	mov	r1, fp
 800084e:	4650      	mov	r0, sl
 8000850:	f002 f8b0 	bl	80029b4 <outs>
 8000854:	2800      	cmp	r0, #0
 8000856:	f2c0 80a4 	blt.w	80009a2 <cbvprintf+0x236>
 800085a:	4405      	add	r5, r0
			OUTS(bps, bpe);
 800085c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8000860:	e78c      	b.n	800077c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000862:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000866:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000868:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800086c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000870:	d102      	bne.n	8000878 <cbvprintf+0x10c>
				value->uint = (unsigned char)value->uint;
 8000872:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8000876:	e010      	b.n	800089a <cbvprintf+0x12e>
			} else if (length_mod == LENGTH_H) {
 8000878:	2902      	cmp	r1, #2
 800087a:	d1e0      	bne.n	800083e <cbvprintf+0xd2>
				value->sint = (short)value->sint;
 800087c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8000880:	e7da      	b.n	8000838 <cbvprintf+0xcc>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000882:	2b02      	cmp	r3, #2
 8000884:	d120      	bne.n	80008c8 <cbvprintf+0x15c>
			switch (length_mod) {
 8000886:	1ecb      	subs	r3, r1, #3
 8000888:	2b04      	cmp	r3, #4
 800088a:	d810      	bhi.n	80008ae <cbvprintf+0x142>
 800088c:	e8df f003 	tbb	[pc, r3]
 8000890:	0f090903 	.word	0x0f090903
 8000894:	0f          	.byte	0x0f
 8000895:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned long);
 8000896:	f854 3b04 	ldr.w	r3, [r4], #4
				value->uint = (unsigned char)value->uint;
 800089a:	930a      	str	r3, [sp, #40]	; 0x28
 800089c:	2300      	movs	r3, #0
 800089e:	930b      	str	r3, [sp, #44]	; 0x2c
 80008a0:	e7cd      	b.n	800083e <cbvprintf+0xd2>
					(uint_value_type)va_arg(ap,
 80008a2:	3407      	adds	r4, #7
 80008a4:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 80008a8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80008ac:	e7c5      	b.n	800083a <cbvprintf+0xce>
					(uint_value_type)va_arg(ap, size_t);
 80008ae:	f854 3b04 	ldr.w	r3, [r4], #4
 80008b2:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 80008b4:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 80008b6:	f04f 0300 	mov.w	r3, #0
 80008ba:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 80008bc:	d0d9      	beq.n	8000872 <cbvprintf+0x106>
			} else if (length_mod == LENGTH_H) {
 80008be:	2902      	cmp	r1, #2
 80008c0:	d1bd      	bne.n	800083e <cbvprintf+0xd2>
				value->uint = (unsigned short)value->uint;
 80008c2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80008c6:	e7e8      	b.n	800089a <cbvprintf+0x12e>
		} else if (specifier_cat == SPECIFIER_FP) {
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d107      	bne.n	80008dc <cbvprintf+0x170>
			if (length_mod == LENGTH_UPPER_L) {
 80008cc:	3407      	adds	r4, #7
 80008ce:	f024 0407 	bic.w	r4, r4, #7
 80008d2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
 80008d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80008da:	e7b0      	b.n	800083e <cbvprintf+0xd2>
		} else if (specifier_cat == SPECIFIER_PTR) {
 80008dc:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 80008de:	bf04      	itt	eq
 80008e0:	f854 3b04 	ldreq.w	r3, [r4], #4
 80008e4:	930a      	streq	r3, [sp, #40]	; 0x28
 80008e6:	e7aa      	b.n	800083e <cbvprintf+0xd2>
		switch (conv->specifier) {
 80008e8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 80008ec:	2878      	cmp	r0, #120	; 0x78
 80008ee:	d8b5      	bhi.n	800085c <cbvprintf+0xf0>
 80008f0:	2862      	cmp	r0, #98	; 0x62
 80008f2:	d81f      	bhi.n	8000934 <cbvprintf+0x1c8>
 80008f4:	2825      	cmp	r0, #37	; 0x25
 80008f6:	d04f      	beq.n	8000998 <cbvprintf+0x22c>
 80008f8:	2858      	cmp	r0, #88	; 0x58
 80008fa:	d1af      	bne.n	800085c <cbvprintf+0xf0>
			bps = encode_uint(value->uint, conv, buf, bpe);
 80008fc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000906:	ab04      	add	r3, sp, #16
 8000908:	aa0c      	add	r2, sp, #48	; 0x30
 800090a:	f002 f808 	bl	800291e <encode_uint>
 800090e:	4681      	mov	r9, r0
			if (precision >= 0) {
 8000910:	2f00      	cmp	r7, #0
 8000912:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000916:	db0b      	blt.n	8000930 <cbvprintf+0x1c4>
				conv->flag_zero = false;
 8000918:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 800091c:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
 8000920:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000924:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8000926:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 800092a:	d901      	bls.n	8000930 <cbvprintf+0x1c4>
					conv->pad0_value = precision - (int)len;
 800092c:	1aff      	subs	r7, r7, r3
 800092e:	970d      	str	r7, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000930:	4607      	mov	r7, r0
 8000932:	e044      	b.n	80009be <cbvprintf+0x252>
 8000934:	3863      	subs	r0, #99	; 0x63
 8000936:	2815      	cmp	r0, #21
 8000938:	d890      	bhi.n	800085c <cbvprintf+0xf0>
 800093a:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <cbvprintf+0x1d4>)
 800093c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000940:	080009cf 	.word	0x080009cf
 8000944:	08000a33 	.word	0x08000a33
 8000948:	0800085d 	.word	0x0800085d
 800094c:	0800085d 	.word	0x0800085d
 8000950:	0800085d 	.word	0x0800085d
 8000954:	0800085d 	.word	0x0800085d
 8000958:	08000a33 	.word	0x08000a33
 800095c:	0800085d 	.word	0x0800085d
 8000960:	0800085d 	.word	0x0800085d
 8000964:	0800085d 	.word	0x0800085d
 8000968:	0800085d 	.word	0x0800085d
 800096c:	08000a91 	.word	0x08000a91
 8000970:	08000a5f 	.word	0x08000a5f
 8000974:	08000a63 	.word	0x08000a63
 8000978:	0800085d 	.word	0x0800085d
 800097c:	0800085d 	.word	0x0800085d
 8000980:	080009a9 	.word	0x080009a9
 8000984:	0800085d 	.word	0x0800085d
 8000988:	08000a5f 	.word	0x08000a5f
 800098c:	0800085d 	.word	0x0800085d
 8000990:	0800085d 	.word	0x0800085d
 8000994:	08000a5f 	.word	0x08000a5f
			OUTC('%');
 8000998:	4659      	mov	r1, fp
 800099a:	47d0      	blx	sl
 800099c:	2800      	cmp	r0, #0
 800099e:	f6bf aefc 	bge.w	800079a <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
 80009a2:	b011      	add	sp, #68	; 0x44
 80009a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (precision >= 0) {
 80009a8:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 80009aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
			if (precision >= 0) {
 80009ae:	db0a      	blt.n	80009c6 <cbvprintf+0x25a>
				len = strnlen(bps, precision);
 80009b0:	4639      	mov	r1, r7
 80009b2:	4648      	mov	r0, r9
 80009b4:	f002 f87f 	bl	8002ab6 <strnlen>
			bpe = bps + len;
 80009b8:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
 80009bc:	2600      	movs	r6, #0
		if (bps == NULL) {
 80009be:	f1b9 0f00 	cmp.w	r9, #0
 80009c2:	d10c      	bne.n	80009de <cbvprintf+0x272>
 80009c4:	e74a      	b.n	800085c <cbvprintf+0xf0>
				len = strlen(bps);
 80009c6:	4648      	mov	r0, r9
 80009c8:	f002 f86e 	bl	8002aa8 <strlen>
 80009cc:	e7f4      	b.n	80009b8 <cbvprintf+0x24c>
			buf[0] = value->uint;
 80009ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80009d0:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
 80009d4:	2600      	movs	r6, #0
			bpe = buf + 1;
 80009d6:	f10d 0711 	add.w	r7, sp, #17
			bps = buf;
 80009da:	f10d 0910 	add.w	r9, sp, #16
		size_t nj_len = (bpe - bps);
 80009de:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
 80009e2:	b106      	cbz	r6, 80009e6 <cbvprintf+0x27a>
			nj_len += 1U;
 80009e4:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 80009e6:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80009ea:	06d0      	lsls	r0, r2, #27
 80009ec:	d56a      	bpl.n	8000ac4 <cbvprintf+0x358>
			nj_len += 2U;
 80009ee:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 80009f0:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 80009f2:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 80009f4:	bf48      	it	mi
 80009f6:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 80009f8:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 80009fa:	bf48      	it	mi
 80009fc:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 80009fe:	f1b8 0f00 	cmp.w	r8, #0
 8000a02:	dd73      	ble.n	8000aec <cbvprintf+0x380>
			if (!conv->flag_dash) {
 8000a04:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000a08:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
 8000a0c:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000a10:	9303      	str	r3, [sp, #12]
 8000a12:	0753      	lsls	r3, r2, #29
 8000a14:	d46a      	bmi.n	8000aec <cbvprintf+0x380>
				if (conv->flag_zero) {
 8000a16:	0650      	lsls	r0, r2, #25
 8000a18:	f140 80a6 	bpl.w	8000b68 <cbvprintf+0x3fc>
					if (sign != 0) {
 8000a1c:	b13e      	cbz	r6, 8000a2e <cbvprintf+0x2c2>
						OUTC(sign);
 8000a1e:	4659      	mov	r1, fp
 8000a20:	4630      	mov	r0, r6
 8000a22:	47d0      	blx	sl
 8000a24:	2800      	cmp	r0, #0
 8000a26:	dbbc      	blt.n	80009a2 <cbvprintf+0x236>
						sign = 0;
 8000a28:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000a2a:	3501      	adds	r5, #1
						sign = 0;
 8000a2c:	461e      	mov	r6, r3
					pad = '0';
 8000a2e:	2330      	movs	r3, #48	; 0x30
 8000a30:	e09b      	b.n	8000b6a <cbvprintf+0x3fe>
			if (conv->flag_plus) {
 8000a32:	071e      	lsls	r6, r3, #28
 8000a34:	d411      	bmi.n	8000a5a <cbvprintf+0x2ee>
				sign = ' ';
 8000a36:	f013 0610 	ands.w	r6, r3, #16
 8000a3a:	bf18      	it	ne
 8000a3c:	2620      	movne	r6, #32
			if (value->sint < 0) {
 8000a3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	f173 0100 	sbcs.w	r1, r3, #0
 8000a48:	f6bf af58 	bge.w	80008fc <cbvprintf+0x190>
				value->uint = (uint_value_type)-value->sint;
 8000a4c:	4252      	negs	r2, r2
 8000a4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
 8000a56:	262d      	movs	r6, #45	; 0x2d
 8000a58:	e750      	b.n	80008fc <cbvprintf+0x190>
				sign = '+';
 8000a5a:	262b      	movs	r6, #43	; 0x2b
 8000a5c:	e7ef      	b.n	8000a3e <cbvprintf+0x2d2>
		switch (conv->specifier) {
 8000a5e:	2600      	movs	r6, #0
 8000a60:	e74c      	b.n	80008fc <cbvprintf+0x190>
			if (value->ptr != NULL) {
 8000a62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000a64:	b348      	cbz	r0, 8000aba <cbvprintf+0x34e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000a66:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	aa0c      	add	r2, sp, #48	; 0x30
 8000a6e:	ab04      	add	r3, sp, #16
 8000a70:	2100      	movs	r1, #0
 8000a72:	f001 ff54 	bl	800291e <encode_uint>
				conv->altform_0c = true;
 8000a76:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8000a7a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000a7e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000a82:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000a86:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8000a88:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 8000a8c:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8000a8e:	e73f      	b.n	8000910 <cbvprintf+0x1a4>
				store_count(conv, value->ptr, count);
 8000a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000a92:	2907      	cmp	r1, #7
 8000a94:	f63f aee2 	bhi.w	800085c <cbvprintf+0xf0>
 8000a98:	e8df f001 	tbb	[pc, r1]
 8000a9c:	0d06040d 	.word	0x0d06040d
 8000aa0:	0d0d0808 	.word	0x0d0d0808
		*(signed char *)dp = (signed char)count;
 8000aa4:	701d      	strb	r5, [r3, #0]
		break;
 8000aa6:	e6d9      	b.n	800085c <cbvprintf+0xf0>
		*(short *)dp = (short)count;
 8000aa8:	801d      	strh	r5, [r3, #0]
		break;
 8000aaa:	e6d7      	b.n	800085c <cbvprintf+0xf0>
		*(intmax_t *)dp = (intmax_t)count;
 8000aac:	4628      	mov	r0, r5
 8000aae:	17e9      	asrs	r1, r5, #31
 8000ab0:	e9c3 0100 	strd	r0, r1, [r3]
		break;
 8000ab4:	e6d2      	b.n	800085c <cbvprintf+0xf0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000ab6:	601d      	str	r5, [r3, #0]
		break;
 8000ab8:	e6d0      	b.n	800085c <cbvprintf+0xf0>
			bpe = bps + 5;
 8000aba:	4f31      	ldr	r7, [pc, #196]	; (8000b80 <cbvprintf+0x414>)
 8000abc:	4606      	mov	r6, r0
			bps = "(nil)";
 8000abe:	f1a7 0905 	sub.w	r9, r7, #5
 8000ac2:	e78c      	b.n	80009de <cbvprintf+0x272>
		} else if (conv->altform_0) {
 8000ac4:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000ac6:	bf48      	it	mi
 8000ac8:	3301      	addmi	r3, #1
 8000aca:	e791      	b.n	80009f0 <cbvprintf+0x284>
					OUTC(pad);
 8000acc:	4618      	mov	r0, r3
 8000ace:	4659      	mov	r1, fp
 8000ad0:	9303      	str	r3, [sp, #12]
 8000ad2:	47d0      	blx	sl
 8000ad4:	2800      	cmp	r0, #0
 8000ad6:	9b03      	ldr	r3, [sp, #12]
 8000ad8:	f6ff af63 	blt.w	80009a2 <cbvprintf+0x236>
 8000adc:	4642      	mov	r2, r8
				while (width-- > 0) {
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	eba5 0108 	sub.w	r1, r5, r8
 8000ae4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000ae8:	dcf0      	bgt.n	8000acc <cbvprintf+0x360>
 8000aea:	460d      	mov	r5, r1
		if (sign != 0) {
 8000aec:	b136      	cbz	r6, 8000afc <cbvprintf+0x390>
			OUTC(sign);
 8000aee:	4659      	mov	r1, fp
 8000af0:	4630      	mov	r0, r6
 8000af2:	47d0      	blx	sl
 8000af4:	2800      	cmp	r0, #0
 8000af6:	f6ff af54 	blt.w	80009a2 <cbvprintf+0x236>
 8000afa:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000afc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000b00:	06d9      	lsls	r1, r3, #27
 8000b02:	d401      	bmi.n	8000b08 <cbvprintf+0x39c>
 8000b04:	071a      	lsls	r2, r3, #28
 8000b06:	d506      	bpl.n	8000b16 <cbvprintf+0x3aa>
				OUTC('0');
 8000b08:	4659      	mov	r1, fp
 8000b0a:	2030      	movs	r0, #48	; 0x30
 8000b0c:	47d0      	blx	sl
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	f6ff af47 	blt.w	80009a2 <cbvprintf+0x236>
 8000b14:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000b16:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000b1a:	06db      	lsls	r3, r3, #27
 8000b1c:	d507      	bpl.n	8000b2e <cbvprintf+0x3c2>
				OUTC(conv->specifier);
 8000b1e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000b22:	4659      	mov	r1, fp
 8000b24:	47d0      	blx	sl
 8000b26:	2800      	cmp	r0, #0
 8000b28:	f6ff af3b 	blt.w	80009a2 <cbvprintf+0x236>
 8000b2c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000b2e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000b30:	442e      	add	r6, r5
 8000b32:	1b73      	subs	r3, r6, r5
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dc1a      	bgt.n	8000b6e <cbvprintf+0x402>
			OUTS(bps, bpe);
 8000b38:	463b      	mov	r3, r7
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	4659      	mov	r1, fp
 8000b3e:	4650      	mov	r0, sl
 8000b40:	f001 ff38 	bl	80029b4 <outs>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	f6ff af2c 	blt.w	80009a2 <cbvprintf+0x236>
 8000b4a:	4405      	add	r5, r0
		while (width > 0) {
 8000b4c:	44a8      	add	r8, r5
 8000b4e:	eba8 0305 	sub.w	r3, r8, r5
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f77f ae82 	ble.w	800085c <cbvprintf+0xf0>
			OUTC(' ');
 8000b58:	4659      	mov	r1, fp
 8000b5a:	2020      	movs	r0, #32
 8000b5c:	47d0      	blx	sl
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	f6ff af1f 	blt.w	80009a2 <cbvprintf+0x236>
 8000b64:	3501      	adds	r5, #1
			--width;
 8000b66:	e7f2      	b.n	8000b4e <cbvprintf+0x3e2>
				char pad = ' ';
 8000b68:	2320      	movs	r3, #32
 8000b6a:	4445      	add	r5, r8
 8000b6c:	e7b6      	b.n	8000adc <cbvprintf+0x370>
				OUTC('0');
 8000b6e:	4659      	mov	r1, fp
 8000b70:	2030      	movs	r0, #48	; 0x30
 8000b72:	47d0      	blx	sl
 8000b74:	2800      	cmp	r0, #0
 8000b76:	f6ff af14 	blt.w	80009a2 <cbvprintf+0x236>
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e7d9      	b.n	8000b32 <cbvprintf+0x3c6>
 8000b7e:	bf00      	nop
 8000b80:	080035bb 	.word	0x080035bb

08000b84 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000b84:	f04f 0210 	mov.w	r2, #16
 8000b88:	f3ef 8311 	mrs	r3, BASEPRI
 8000b8c:	f382 8811 	msr	BASEPRI, r2
 8000b90:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000b94:	f383 8811 	msr	BASEPRI, r3
 8000b98:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <stm32l4_init+0x24>)
 8000b9e:	4a03      	ldr	r2, [pc, #12]	; (8000bac <stm32l4_init+0x28>)
 8000ba0:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000002c 	.word	0x2000002c
 8000bac:	003d0900 	.word	0x003d0900

08000bb0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8000bb0:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
 8000bb4:	4c07      	ldr	r4, [pc, #28]	; (8000bd4 <uart_console_init+0x24>)
 8000bb6:	f001 f895 	bl	8001ce4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <uart_console_init+0x28>)
 8000bbc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f000 fdb2 	bl	8001728 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff fc63 	bl	8000490 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 8000bca:	2000      	movs	r0, #0
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	bf00      	nop
 8000bd0:	080035bc 	.word	0x080035bc
 8000bd4:	08000bdd 	.word	0x08000bdd
 8000bd8:	20000218 	.word	0x20000218

08000bdc <console_out>:
	if ('\n' == c) {
 8000bdc:	280a      	cmp	r0, #10
{
 8000bde:	b538      	push	{r3, r4, r5, lr}
 8000be0:	4d07      	ldr	r5, [pc, #28]	; (8000c00 <console_out+0x24>)
 8000be2:	4604      	mov	r4, r0
	if ('\n' == c) {
 8000be4:	d104      	bne.n	8000bf0 <console_out+0x14>
 8000be6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8000be8:	6883      	ldr	r3, [r0, #8]
 8000bea:	210d      	movs	r1, #13
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8000bf0:	6828      	ldr	r0, [r5, #0]
 8000bf2:	6883      	ldr	r3, [r0, #8]
 8000bf4:	b2e1      	uxtb	r1, r4
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4798      	blx	r3
}
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000218 	.word	0x20000218

08000c04 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8000c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000c08:	4f0d      	ldr	r7, [pc, #52]	; (8000c40 <__stm32_exti_isr.isra.0+0x3c>)
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	460e      	mov	r6, r1
 8000c0e:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000c10:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8000c14:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8000c18:	42b4      	cmp	r4, r6
 8000c1a:	db01      	blt.n	8000c20 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8000c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c20:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000c22:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8000c26:	ea33 0202 	bics.w	r2, r3, r2
 8000c2a:	d107      	bne.n	8000c3c <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000c2c:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8000c2e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8000c32:	b11b      	cbz	r3, 8000c3c <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8000c34:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8000c3c:	3401      	adds	r4, #1
 8000c3e:	e7eb      	b.n	8000c18 <__stm32_exti_isr.isra.0+0x14>
 8000c40:	40010400 	.word	0x40010400

08000c44 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8000c46:	2301      	movs	r3, #1
 8000c48:	6811      	ldr	r1, [r2, #0]
 8000c4a:	4083      	lsls	r3, r0
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8000c50:	4b02      	ldr	r3, [pc, #8]	; (8000c5c <stm32_exti_enable+0x18>)
 8000c52:	5618      	ldrsb	r0, [r3, r0]
 8000c54:	f000 baaa 	b.w	80011ac <arch_irq_enable>
 8000c58:	40010400 	.word	0x40010400
 8000c5c:	080035ce 	.word	0x080035ce

08000c60 <stm32_exti_disable>:
	if (line < 32) {
 8000c60:	281f      	cmp	r0, #31
 8000c62:	dc07      	bgt.n	8000c74 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000c64:	4904      	ldr	r1, [pc, #16]	; (8000c78 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8000c66:	2201      	movs	r2, #1
 8000c68:	680b      	ldr	r3, [r1, #0]
 8000c6a:	fa02 f000 	lsl.w	r0, r2, r0
 8000c6e:	ea23 0000 	bic.w	r0, r3, r0
 8000c72:	6008      	str	r0, [r1, #0]
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40010400 	.word	0x40010400

08000c7c <stm32_exti_trigger>:
	switch (trigger) {
 8000c7c:	2903      	cmp	r1, #3
 8000c7e:	d80f      	bhi.n	8000ca0 <stm32_exti_trigger+0x24>
 8000c80:	e8df f001 	tbb	[pc, r1]
 8000c84:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	6899      	ldr	r1, [r3, #8]
 8000c8e:	fa02 f000 	lsl.w	r0, r2, r0
 8000c92:	ea21 0100 	bic.w	r1, r1, r0
 8000c96:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000c9e:	60d8      	str	r0, [r3, #12]
}
 8000ca0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <stm32_exti_trigger+0x64>)
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	4302      	orrs	r2, r0
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	e7f2      	b.n	8000c98 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <stm32_exti_trigger+0x64>)
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	4302      	orrs	r2, r0
 8000cbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	ea22 0000 	bic.w	r0, r2, r0
 8000cc6:	6098      	str	r0, [r3, #8]
}
 8000cc8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000cca:	2301      	movs	r3, #1
 8000ccc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <stm32_exti_trigger+0x64>)
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	4310      	orrs	r0, r2
 8000cdc:	e7df      	b.n	8000c9e <stm32_exti_trigger+0x22>
 8000cde:	bf00      	nop
 8000ce0:	40010400 	.word	0x40010400

08000ce4 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <stm32_exti_set_callback+0x20>)
{
 8000ce6:	b510      	push	{r4, lr}
 8000ce8:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8000cea:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8000cee:	b928      	cbnz	r0, 8000cfc <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8000cf0:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8000cf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000cf8:	605a      	str	r2, [r3, #4]

	return 0;
}
 8000cfa:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8000cfc:	f06f 000f 	mvn.w	r0, #15
 8000d00:	e7fb      	b.n	8000cfa <stm32_exti_set_callback+0x16>
 8000d02:	bf00      	nop
 8000d04:	2000021c 	.word	0x2000021c

08000d08 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <stm32_exti_unset_callback+0x10>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8000d10:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8000d14:	605a      	str	r2, [r3, #4]
}
 8000d16:	4770      	bx	lr
 8000d18:	2000021c 	.word	0x2000021c

08000d1c <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000d1c:	680b      	ldr	r3, [r1, #0]
{
 8000d1e:	b086      	sub	sp, #24
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d838      	bhi.n	8000d96 <stm32_clock_control_on+0x7a>
 8000d24:	e8df f003 	tbb	[pc, r3]
 8000d28:	2d190f03 	.word	0x2d190f03
 8000d2c:	23          	.byte	0x23
 8000d2d:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d2e:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <stm32_clock_control_on+0x80>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8000d30:	684b      	ldr	r3, [r1, #4]
 8000d32:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8000d34:	4319      	orrs	r1, r3
 8000d36:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000d3e:	9b01      	ldr	r3, [sp, #4]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000d40:	2000      	movs	r0, #0
}
 8000d42:	b006      	add	sp, #24
 8000d44:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <stm32_clock_control_on+0x80>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8000d48:	684b      	ldr	r3, [r1, #4]
 8000d4a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000d52:	4013      	ands	r3, r2
 8000d54:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000d56:	9b02      	ldr	r3, [sp, #8]
 8000d58:	e7f2      	b.n	8000d40 <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <stm32_clock_control_on+0x80>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8000d5c:	684b      	ldr	r3, [r1, #4]
 8000d5e:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8000d60:	4319      	orrs	r1, r3
 8000d62:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d64:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000d66:	4013      	ands	r3, r2
 8000d68:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000d6a:	9b03      	ldr	r3, [sp, #12]
 8000d6c:	e7e8      	b.n	8000d40 <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <stm32_clock_control_on+0x80>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8000d70:	684b      	ldr	r3, [r1, #4]
 8000d72:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8000d74:	4319      	orrs	r1, r3
 8000d76:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000d78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8000d7e:	9b04      	ldr	r3, [sp, #16]
 8000d80:	e7de      	b.n	8000d40 <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <stm32_clock_control_on+0x80>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8000d84:	684b      	ldr	r3, [r1, #4]
 8000d86:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8000d88:	4319      	orrs	r1, r3
 8000d8a:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d8c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000d8e:	4013      	ands	r3, r2
 8000d90:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8000d92:	9b05      	ldr	r3, [sp, #20]
 8000d94:	e7d4      	b.n	8000d40 <stm32_clock_control_on+0x24>
	switch (pclken->bus) {
 8000d96:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000d9a:	e7d2      	b.n	8000d42 <stm32_clock_control_on+0x26>
 8000d9c:	40021000 	.word	0x40021000

08000da0 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000da0:	680b      	ldr	r3, [r1, #0]
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d828      	bhi.n	8000df8 <stm32_clock_control_off+0x58>
 8000da6:	e8df f003 	tbb	[pc, r3]
 8000daa:	0b03      	.short	0x0b03
 8000dac:	2012      	.short	0x2012
 8000dae:	19          	.byte	0x19
 8000daf:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <stm32_clock_control_off+0x60>)
 8000db2:	6849      	ldr	r1, [r1, #4]
 8000db4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8000db6:	ea23 0301 	bic.w	r3, r3, r1
 8000dba:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000dbc:	2000      	movs	r0, #0
}
 8000dbe:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000dc0:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <stm32_clock_control_off+0x60>)
 8000dc2:	6849      	ldr	r1, [r1, #4]
 8000dc4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000dc6:	ea23 0301 	bic.w	r3, r3, r1
 8000dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dcc:	e7f6      	b.n	8000dbc <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000dce:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <stm32_clock_control_off+0x60>)
 8000dd0:	6849      	ldr	r1, [r1, #4]
 8000dd2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000dd4:	ea23 0301 	bic.w	r3, r3, r1
 8000dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dda:	e7ef      	b.n	8000dbc <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <stm32_clock_control_off+0x60>)
 8000dde:	6849      	ldr	r1, [r1, #4]
 8000de0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8000de2:	ea23 0301 	bic.w	r3, r3, r1
 8000de6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000de8:	e7e8      	b.n	8000dbc <stm32_clock_control_off+0x1c>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <stm32_clock_control_off+0x60>)
 8000dec:	6849      	ldr	r1, [r1, #4]
 8000dee:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000df0:	ea23 0301 	bic.w	r3, r3, r1
 8000df4:	6613      	str	r3, [r2, #96]	; 0x60
 8000df6:	e7e1      	b.n	8000dbc <stm32_clock_control_off+0x1c>
	switch (pclken->bus) {
 8000df8:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <stm32_clock_control_get_subsys_rate>:
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8000e04:	680b      	ldr	r3, [r1, #0]
 8000e06:	2b04      	cmp	r3, #4
	uint32_t ahb_clock = SystemCoreClock;
 8000e08:	bf9f      	itttt	ls
 8000e0a:	4b04      	ldrls	r3, [pc, #16]	; (8000e1c <stm32_clock_control_get_subsys_rate+0x18>)
 8000e0c:	681b      	ldrls	r3, [r3, #0]
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8000e0e:	6013      	strls	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000e10:	2000      	movls	r0, #0
	switch (pclken->bus) {
 8000e12:	bf88      	it	hi
 8000e14:	f06f 0022 	mvnhi.w	r0, #34	; 0x22
}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000002c 	.word	0x2000002c

08000e20 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(const struct device *dev)
{
 8000e20:	b510      	push	{r4, lr}
 8000e22:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(
 8000e24:	2300      	movs	r3, #0
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000e26:	4c1d      	ldr	r4, [pc, #116]	; (8000e9c <stm32_clock_control_init+0x7c>)
	clk_init->APB2CLKDivider = apb2_prescaler(
 8000e28:	9302      	str	r3, [sp, #8]
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000e2a:	e9cd 3300 	strd	r3, r3, [sp]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8000e2e:	f001 fe29 	bl	8002a84 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8000e32:	a803      	add	r0, sp, #12
 8000e34:	f001 fe1e 	bl	8002a74 <config_pll_init>
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	055a      	lsls	r2, r3, #21
 8000e3c:	d406      	bmi.n	8000e4c <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e44:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	055b      	lsls	r3, r3, #21
 8000e4a:	d5fc      	bpl.n	8000e46 <stm32_clock_control_init+0x26>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e4c:	68a3      	ldr	r3, [r4, #8]
 8000e4e:	f023 0303 	bic.w	r3, r3, #3
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e58:	68a3      	ldr	r3, [r4, #8]
 8000e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e5e:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e60:	68a3      	ldr	r3, [r4, #8]
 8000e62:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d1fa      	bne.n	8000e60 <stm32_clock_control_init+0x40>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e70:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#ifdef CONFIG_CLOCK_STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8000e72:	68e3      	ldr	r3, [r4, #12]
 8000e74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8000e78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e7c:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif CONFIG_CLOCK_STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8000e7e:	4669      	mov	r1, sp
 8000e80:	a803      	add	r0, sp, #12
 8000e82:	f000 fec1 	bl	8001c08 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8c:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000e8e:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8000e90:	2000      	movs	r0, #0
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	6023      	str	r3, [r4, #0]
 8000e98:	b006      	add	sp, #24
 8000e9a:	bd10      	pop	{r4, pc}
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <enable_port>:
 * @param clk  optional clock device
 *
 * @return 0 on success, error otherwise
 */
static int enable_port(uint32_t port, const struct device *clk)
{
 8000ea0:	b513      	push	{r0, r1, r4, lr}
 8000ea2:	4604      	mov	r4, r0
	/* enable port clock */
	if (!clk) {
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	b911      	cbnz	r1, 8000eae <enable_port+0xe>
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <enable_port+0x30>)
 8000eaa:	f000 ff1b 	bl	8001ce4 <z_impl_device_get_binding>
		clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	}

	struct stm32_pclken pclken;

	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <enable_port+0x34>)
 8000eb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000eb8:	9301      	str	r3, [sp, #4]

	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8000eba:	3301      	adds	r3, #1
 8000ebc:	d005      	beq.n	8000eca <enable_port+0x2a>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8000ebe:	6883      	ldr	r3, [r0, #8]
 8000ec0:	4669      	mov	r1, sp
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4798      	blx	r3
		return -EIO;
	}

	return clock_control_on(clk, (clock_control_subsys_t *) &pclken);
}
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd10      	pop	{r4, pc}
		return -EIO;
 8000eca:	f06f 0004 	mvn.w	r0, #4
 8000ece:	e7fa      	b.n	8000ec6 <enable_port+0x26>
 8000ed0:	080035de 	.word	0x080035de
 8000ed4:	08003408 	.word	0x08003408

08000ed8 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8000ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000edc:	4607      	mov	r7, r0
	const struct device *clk;
	uint32_t pin, mux;
	uint32_t func = 0;

	if (!list_size) {
 8000ede:	460e      	mov	r6, r1
 8000ee0:	b331      	cbz	r1, 8000f30 <stm32_dt_pinctrl_configure+0x58>
 8000ee2:	4818      	ldr	r0, [pc, #96]	; (8000f44 <stm32_dt_pinctrl_configure+0x6c>)
 8000ee4:	f000 fefe 	bl	8001ce4 <z_impl_device_get_binding>
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	/* make sure to enable port clock first */
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (int i = 0; i < list_size; i++) {
 8000ee8:	2500      	movs	r5, #0
 8000eea:	4680      	mov	r8, r0
	uint32_t func = 0;
 8000eec:	46ab      	mov	fp, r5
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8000eee:	f107 0a04 	add.w	sl, r7, #4
		mux = pinctrl[i].pinmux;
 8000ef2:	f857 4035 	ldr.w	r4, [r7, r5, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 8000ef6:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8000efa:	b2e3      	uxtb	r3, r4
 8000efc:	d11c      	bne.n	8000f38 <stm32_dt_pinctrl_configure+0x60>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8000efe:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 8000f02:	f042 0b20 	orr.w	fp, r2, #32
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8000f06:	f3c4 2907 	ubfx	r9, r4, #8, #8
			       STM32_DT_PINMUX_LINE(mux));

		enable_port(STM32_PORT(pin), clk);
 8000f0a:	f3c4 3403 	ubfx	r4, r4, #12, #4
 8000f0e:	4641      	mov	r1, r8
 8000f10:	4620      	mov	r0, r4
	uint32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8000f12:	02a4      	lsls	r4, r4, #10
 8000f14:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < list_size; i++) {
 8000f16:	3501      	adds	r5, #1
		enable_port(STM32_PORT(pin), clk);
 8000f18:	f7ff ffc2 	bl	8000ea0 <enable_port>
	return gpio_stm32_configure((uint32_t *)port_base,
 8000f1c:	9b01      	ldr	r3, [sp, #4]
 8000f1e:	465a      	mov	r2, fp
 8000f20:	f009 010f 	and.w	r1, r9, #15
 8000f24:	f104 4090 	add.w	r0, r4, #1207959552	; 0x48000000
 8000f28:	f001 fe89 	bl	8002c3e <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8000f2c:	42ae      	cmp	r6, r5
 8000f2e:	d1e0      	bne.n	8000ef2 <stm32_dt_pinctrl_configure+0x1a>

		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
	}

	return 0;
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	b003      	add	sp, #12
 8000f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			func = STM32_MODER_ANALOG_MODE;
 8000f38:	2b10      	cmp	r3, #16
 8000f3a:	bf08      	it	eq
 8000f3c:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8000f40:	e7e1      	b.n	8000f06 <stm32_dt_pinctrl_configure+0x2e>
 8000f42:	bf00      	nop
 8000f44:	080035de 	.word	0x080035de

08000f48 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <elapsed+0x30>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8000f4c:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 8000f4e:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <elapsed+0x34>)
 8000f52:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 8000f56:	b510      	push	{r4, lr}
 8000f58:	4909      	ldr	r1, [pc, #36]	; (8000f80 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8000f5a:	d101      	bne.n	8000f60 <elapsed+0x18>
	    || (val1 < val2)) {
 8000f5c:	4282      	cmp	r2, r0
 8000f5e:	d205      	bcs.n	8000f6c <elapsed+0x24>
		overflow_cyc += last_load;
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	680c      	ldr	r4, [r1, #0]
 8000f64:	4422      	add	r2, r4
 8000f66:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8000f68:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <elapsed+0x30>)
 8000f6a:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	680a      	ldr	r2, [r1, #0]
 8000f70:	4413      	add	r3, r2
}
 8000f72:	1a18      	subs	r0, r3, r0
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010
 8000f7c:	200002a8 	.word	0x200002a8
 8000f80:	200002a4 	.word	0x200002a4

08000f84 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8000f84:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8000f86:	f7ff ffdf 	bl	8000f48 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <z_clock_isr+0x38>)
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <z_clock_isr+0x3c>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	6811      	ldr	r1, [r2, #0]
 8000f92:	4408      	add	r0, r1
 8000f94:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <z_clock_isr+0x40>)
 8000f9c:	6811      	ldr	r1, [r2, #0]
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	1a40      	subs	r0, r0, r1
 8000fa4:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8000fa8:	fb03 1300 	mla	r3, r3, r0, r1
 8000fac:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 8000fae:	f001 fb41 	bl	8002634 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
}
 8000fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8000fb6:	f000 babf 	b.w	8001538 <z_arm_exc_exit>
 8000fba:	bf00      	nop
 8000fbc:	200002a8 	.word	0x200002a8
 8000fc0:	200002a0 	.word	0x200002a0
 8000fc4:	2000029c 	.word	0x2000029c

08000fc8 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <z_clock_driver_init+0x28>)
 8000fca:	2210      	movs	r2, #16
 8000fcc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int z_clock_driver_init(const struct device *device)
{
	ARG_UNUSED(device);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <z_clock_driver_init+0x2c>)
 8000fd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <z_clock_driver_init+0x30>)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <z_clock_driver_init+0x34>)
 8000fe0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000fe2:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	f042 0207 	orr.w	r2, r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00
 8000ff4:	200002a4 	.word	0x200002a4
 8000ff8:	200002a8 	.word	0x200002a8
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	4d2b      	ldr	r5, [pc, #172]	; (80010b0 <z_clock_set_timeout+0xb0>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 8001004:	b151      	cbz	r1, 800101c <z_clock_set_timeout+0x1c>
	    && ticks == K_TICKS_FOREVER) {
 8001006:	1c43      	adds	r3, r0, #1
 8001008:	d10e      	bne.n	8001028 <z_clock_set_timeout+0x28>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800100a:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <z_clock_set_timeout+0xb4>)
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	f023 0301 	bic.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8001014:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001018:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 800101a:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800101c:	f244 1388 	movw	r3, #16776	; 0x4188
 8001020:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001024:	bf08      	it	eq
 8001026:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001028:	1e44      	subs	r4, r0, #1
 800102a:	2c00      	cmp	r4, #0
 800102c:	dd27      	ble.n	800107e <z_clock_set_timeout+0x7e>
 800102e:	f244 1388 	movw	r3, #16776	; 0x4188
 8001032:	429c      	cmp	r4, r3
 8001034:	bfa8      	it	ge
 8001036:	461c      	movge	r4, r3
	__asm__ volatile(
 8001038:	f04f 0310 	mov.w	r3, #16
 800103c:	f3ef 8611 	mrs	r6, BASEPRI
 8001040:	f383 8811 	msr	BASEPRI, r3
 8001044:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001048:	f7ff ff7e 	bl	8000f48 <elapsed>
	cycle_count += pending;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <z_clock_set_timeout+0xb8>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4410      	add	r0, r2
 8001052:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <z_clock_set_timeout+0xbc>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <z_clock_set_timeout+0xc0>)
 800105c:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800105e:	1ac1      	subs	r1, r0, r3
 8001060:	d50f      	bpl.n	8001082 <z_clock_set_timeout+0x82>
		last_load = MIN_DELAY;
 8001062:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8001066:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <z_clock_set_timeout+0xb4>)
 800106c:	3b01      	subs	r3, #1
 800106e:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001070:	2300      	movs	r3, #0
 8001072:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 8001074:	f386 8811 	msr	BASEPRI, r6
 8001078:	f3bf 8f6f 	isb	sy
 800107c:	e7cd      	b.n	800101a <z_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800107e:	2400      	movs	r4, #0
 8001080:	e7da      	b.n	8001038 <z_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 8001082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		delay += unannounced;
 8001086:	fb02 1404 	mla	r4, r2, r4, r1
		delay -= unannounced;
 800108a:	1a18      	subs	r0, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800108c:	f204 34e7 	addw	r4, r4, #999	; 0x3e7
 8001090:	fbb4 f4f2 	udiv	r4, r4, r2
		delay -= unannounced;
 8001094:	fb02 0004 	mla	r0, r2, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8001098:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800109c:	d904      	bls.n	80010a8 <z_clock_set_timeout+0xa8>
		if (delay > MAX_CYCLES) {
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <z_clock_set_timeout+0xc4>)
 80010a0:	4298      	cmp	r0, r3
 80010a2:	d8e0      	bhi.n	8001066 <z_clock_set_timeout+0x66>
			last_load = delay;
 80010a4:	6028      	str	r0, [r5, #0]
 80010a6:	e7df      	b.n	8001068 <z_clock_set_timeout+0x68>
		delay = MAX(delay, MIN_DELAY);
 80010a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010ac:	e7fa      	b.n	80010a4 <z_clock_set_timeout+0xa4>
 80010ae:	bf00      	nop
 80010b0:	200002a4 	.word	0x200002a4
 80010b4:	e000e010 	.word	0xe000e010
 80010b8:	200002a0 	.word	0x200002a0
 80010bc:	200002a8 	.word	0x200002a8
 80010c0:	2000029c 	.word	0x2000029c
 80010c4:	00fffb40 	.word	0x00fffb40

080010c8 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
 80010c8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80010ca:	f04f 0310 	mov.w	r3, #16
 80010ce:	f3ef 8411 	mrs	r4, BASEPRI
 80010d2:	f383 8811 	msr	BASEPRI, r3
 80010d6:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80010da:	f7ff ff35 	bl	8000f48 <elapsed>
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <z_clock_elapsed+0x34>)
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <z_clock_elapsed+0x38>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	4403      	add	r3, r0
	__asm__ volatile(
 80010ea:	f384 8811 	msr	BASEPRI, r4
 80010ee:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 80010f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f6:	fbb3 f0f0 	udiv	r0, r3, r0
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	200002a0 	.word	0x200002a0
 8001100:	2000029c 	.word	0x2000029c

08001104 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8001104:	4a09      	ldr	r2, [pc, #36]	; (800112c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001106:	490a      	ldr	r1, [pc, #40]	; (8001130 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8001108:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800110a:	6809      	ldr	r1, [r1, #0]
 800110c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800110e:	4909      	ldr	r1, [pc, #36]	; (8001134 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8001110:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001112:	684b      	ldr	r3, [r1, #4]
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	604b      	str	r3, [r1, #4]
 800111a:	2300      	movs	r3, #0
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001124:	6893      	ldr	r3, [r2, #8]
}
 8001126:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000338 	.word	0x20000338
 8001130:	080035ac 	.word	0x080035ac
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001138:	4912      	ldr	r1, [pc, #72]	; (8001184 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800113a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800113c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
 8001140:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8001142:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001146:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800114a:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800114c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8001150:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8001154:	4f0c      	ldr	r7, [pc, #48]	; (8001188 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001156:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 800115a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
 800115c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800115e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8001160:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8001162:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001164:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001166:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 800116a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 800116c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800116e:	f000 fa2b 	bl	80015c8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8001172:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8001176:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
 800117a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800117e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 8001182:	4770      	bx	lr
    ldr r1, =_kernel
 8001184:	20000338 	.word	0x20000338
    ldr v4, =_SCS_ICSR
 8001188:	e000ed04 	.word	0xe000ed04

0800118c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 800118c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8001190:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8001192:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8001196:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800119a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800119c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80011a0:	2902      	cmp	r1, #2
    beq _oops
 80011a2:	d0ff      	beq.n	80011a4 <_oops>

080011a4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80011a4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80011a6:	f001 fc74 	bl	8002a92 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80011aa:	bd01      	pop	{r0, pc}

080011ac <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80011ac:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db08      	blt.n	80011c4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	2201      	movs	r2, #1
 80011b4:	f000 001f 	and.w	r0, r0, #31
 80011b8:	fa02 f000 	lsl.w	r0, r2, r0
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	4a02      	ldr	r2, [pc, #8]	; (80011c8 <arch_irq_enable+0x1c>)
 80011c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80011cc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80011ce:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	bfa8      	it	ge
 80011d2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 80011d6:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	bfb8      	it	lt
 80011dc:	4b06      	ldrlt	r3, [pc, #24]	; (80011f8 <z_arm_irq_priority_set+0x2c>)
 80011de:	ea4f 1101 	mov.w	r1, r1, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	bfac      	ite	ge
 80011e4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	f000 000f 	andlt.w	r0, r0, #15
 80011ec:	b2c9      	uxtb	r1, r1
 80011ee:	bfb4      	ite	lt
 80011f0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 80011f6:	4770      	bx	lr
 80011f8:	e000ed14 	.word	0xe000ed14

080011fc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 80011fc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8001200:	9b00      	ldr	r3, [sp, #0]
 8001202:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8001206:	490a      	ldr	r1, [pc, #40]	; (8001230 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8001208:	9b01      	ldr	r3, [sp, #4]
 800120a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800120e:	9b02      	ldr	r3, [sp, #8]
 8001210:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8001214:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800121c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8001220:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8001224:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001226:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8001228:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
 800122a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	08002753 	.word	0x08002753

08001234 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <z_check_thread_stack_fail+0x30>)
{
 8001236:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8001238:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
 800123a:	b190      	cbz	r0, 8001262 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800123c:	f113 0f16 	cmn.w	r3, #22
 8001240:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8001242:	d005      	beq.n	8001250 <z_check_thread_stack_fail+0x1c>
 8001244:	f1a0 0220 	sub.w	r2, r0, #32
 8001248:	429a      	cmp	r2, r3
 800124a:	d806      	bhi.n	800125a <z_check_thread_stack_fail+0x26>
 800124c:	4283      	cmp	r3, r0
 800124e:	d204      	bcs.n	800125a <z_check_thread_stack_fail+0x26>
 8001250:	4281      	cmp	r1, r0
 8001252:	bf2c      	ite	cs
 8001254:	2100      	movcs	r1, #0
 8001256:	2101      	movcc	r1, #1
 8001258:	e000      	b.n	800125c <z_check_thread_stack_fail+0x28>
 800125a:	2100      	movs	r1, #0
 800125c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 800125e:	bf08      	it	eq
 8001260:	2000      	moveq	r0, #0
}
 8001262:	4770      	bx	lr
 8001264:	20000338 	.word	0x20000338

08001268 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8001268:	b508      	push	{r3, lr}
 800126a:	4604      	mov	r4, r0
 800126c:	460e      	mov	r6, r1
 800126e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
 8001270:	f000 f99e 	bl	80015b0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8001276:	4620      	mov	r0, r4
	_current = main_thread;
 8001278:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800127a:	f000 f9a5 	bl	80015c8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800127e:	4628      	mov	r0, r5
 8001280:	f386 8809 	msr	PSP, r6
 8001284:	2100      	movs	r1, #0
 8001286:	b663      	cpsie	if
 8001288:	f381 8811 	msr	BASEPRI, r1
 800128c:	f3bf 8f6f 	isb	sy
 8001290:	2200      	movs	r2, #0
 8001292:	2300      	movs	r3, #0
 8001294:	f001 fa5d 	bl	8002752 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8001298:	20000338 	.word	0x20000338

0800129c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 800129c:	4901      	ldr	r1, [pc, #4]	; (80012a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 800129e:	2210      	movs	r2, #16
	str	r2, [r1]
 80012a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80012a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80012a4:	e000ed10 	.word	0xe000ed10

080012a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80012a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80012aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80012ac:	f380 8811 	msr	BASEPRI, r0
	isb
 80012b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 80012b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 80012b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80012ba:	b662      	cpsie	i
	isb
 80012bc:	f3bf 8f6f 	isb	sy

	bx	lr
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop

080012c4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80012c4:	bf30      	wfi
    b z_SysNmiOnReset
 80012c6:	f7ff bffd 	b.w	80012c4 <z_SysNmiOnReset>
 80012ca:	bf00      	nop

080012cc <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 80012ce:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <z_arm_prep_c+0x40>)
 80012d2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80012d6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012dc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 80012e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80012e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80012ec:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80012f0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80012f4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80012f8:	f000 fd1c 	bl	8001d34 <z_bss_zero>
	z_data_copy();
 80012fc:	f001 f8a8 	bl	8002450 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8001300:	f000 f928 	bl	8001554 <z_arm_interrupt_init>
	z_cstart();
 8001304:	f000 fd3a 	bl	8001d7c <z_cstart>
 8001308:	08000000 	.word	0x08000000
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001310:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001312:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001316:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800131a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800131e:	4904      	ldr	r1, [pc, #16]	; (8001330 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001320:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001322:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001324:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001326:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800132a:	4902      	ldr	r1, [pc, #8]	; (8001334 <_isr_wrapper+0x24>)
	bx r1
 800132c:	4708      	bx	r1
 800132e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001330:	08003170 	.word	0x08003170
	ldr r1, =z_arm_int_exit
 8001334:	08001539 	.word	0x08001539

08001338 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001338:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800133a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001340:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8001344:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001346:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800134a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800134e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001350:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8001352:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001356:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800135a:	f7ff ffb7 	bl	80012cc <z_arm_prep_c>
 800135e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001360:	20000900 	.word	0x20000900

08001364 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001364:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001368:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 800136c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800136e:	4672      	mov	r2, lr
	bl z_arm_fault
 8001370:	f000 f864 	bl	800143c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001374:	bd01      	pop	{r0, pc}
 8001376:	bf00      	nop

08001378 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8001378:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <mem_manage_fault+0x60>)
{
 800137c:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800137e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 8001384:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001386:	0790      	lsls	r0, r2, #30
 8001388:	d516      	bpl.n	80013b8 <mem_manage_fault+0x40>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 800138a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800138c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800138e:	0612      	lsls	r2, r2, #24
 8001390:	d504      	bpl.n	800139c <mem_manage_fault+0x24>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 8001392:	b119      	cbz	r1, 800139c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800139c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800139e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 80013a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a2:	06d2      	lsls	r2, r2, #27
 80013a4:	d40b      	bmi.n	80013be <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80013a6:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <mem_manage_fault+0x60>)
 80013aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80013ac:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80013b0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 80013b2:	2300      	movs	r3, #0
 80013b4:	7023      	strb	r3, [r4, #0]

	return reason;
}
 80013b6:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 80013b8:	f06f 0015 	mvn.w	r0, #21
 80013bc:	e7ee      	b.n	800139c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	051b      	lsls	r3, r3, #20
 80013c2:	d5f0      	bpl.n	80013a6 <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7ff ff35 	bl	8001234 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d0eb      	beq.n	80013a6 <mem_manage_fault+0x2e>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80013ce:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80013d2:	2002      	movs	r0, #2
 80013d4:	e7e8      	b.n	80013a8 <mem_manage_fault+0x30>
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <bus_fault.isra.0+0x38>)
 80013de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80013e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80013e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013e4:	0592      	lsls	r2, r2, #22
 80013e6:	d508      	bpl.n	80013fa <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 80013e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80013ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ec:	0412      	lsls	r2, r2, #16
 80013ee:	d504      	bpl.n	80013fa <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 80013f0:	b118      	cbz	r0, 80013fa <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80013f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <bus_fault.isra.0+0x38>)
 80013fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80013fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001400:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001402:	bf58      	it	pl
 8001404:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001406:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 8001408:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800140a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8001410:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <usage_fault.isra.0+0x20>)
 800141a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800141c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800141e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001428:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800142c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001430:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 8001432:	2000      	movs	r0, #0
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 800143c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <z_arm_fault+0xe0>)
 8001440:	685b      	ldr	r3, [r3, #4]
{
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800144a:	2500      	movs	r5, #0
 800144c:	f385 8811 	msr	BASEPRI, r5
 8001450:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001454:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8001458:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 800145c:	d111      	bne.n	8001482 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800145e:	f002 010c 	and.w	r1, r2, #12
 8001462:	2908      	cmp	r1, #8
 8001464:	d00d      	beq.n	8001482 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001466:	0711      	lsls	r1, r2, #28
 8001468:	d401      	bmi.n	800146e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 800146a:	4606      	mov	r6, r0
			*nested_exc = true;
 800146c:	2501      	movs	r5, #1
	*recoverable = false;
 800146e:	2200      	movs	r2, #0
 8001470:	3b03      	subs	r3, #3
 8001472:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8001476:	2b03      	cmp	r3, #3
 8001478:	d848      	bhi.n	800150c <z_arm_fault+0xd0>
 800147a:	e8df f003 	tbb	[pc, r3]
 800147e:	3f04      	.short	0x3f04
 8001480:	3c43      	.short	0x3c43
		return NULL;
 8001482:	462e      	mov	r6, r5
 8001484:	e7f3      	b.n	800146e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <z_arm_fault+0xe0>)
 8001488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148a:	0792      	lsls	r2, r2, #30
 800148c:	d43e      	bmi.n	800150c <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800148e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001490:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001494:	d009      	beq.n	80014aa <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
 8001496:	3328      	adds	r3, #40	; 0x28
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b1f3      	cbz	r3, 80014da <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
 800149c:	f10d 0207 	add.w	r2, sp, #7
 80014a0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80014a2:	4630      	mov	r0, r6
 80014a4:	f7ff ff68 	bl	8001378 <mem_manage_fault>
		reason = usage_fault(esf);
 80014a8:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80014aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80014ae:	b993      	cbnz	r3, 80014d6 <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80014b0:	2220      	movs	r2, #32
 80014b2:	4631      	mov	r1, r6
 80014b4:	a802      	add	r0, sp, #8
 80014b6:	f001 fb13 	bl	8002ae0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80014ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014bc:	b345      	cbz	r5, 8001510 <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80014be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014c2:	b922      	cbnz	r2, 80014ce <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80014c4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80014c8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80014cc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80014ce:	a902      	add	r1, sp, #8
 80014d0:	4620      	mov	r0, r4
 80014d2:	f001 fadc 	bl	8002a8e <z_arm_fatal_error>
}
 80014d6:	b00a      	add	sp, #40	; 0x28
 80014d8:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <z_arm_fault+0xe4>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b12b      	cbz	r3, 80014ec <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
 80014e0:	f10d 0107 	add.w	r1, sp, #7
 80014e4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80014e6:	f7ff ff79 	bl	80013dc <bus_fault.isra.0>
 80014ea:	e7dd      	b.n	80014a8 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <z_arm_fault+0xe8>)
 80014ee:	8818      	ldrh	r0, [r3, #0]
 80014f0:	b284      	uxth	r4, r0
 80014f2:	2c00      	cmp	r4, #0
 80014f4:	d0d9      	beq.n	80014aa <z_arm_fault+0x6e>
		reason = usage_fault(esf);
 80014f6:	f7ff ff8f 	bl	8001418 <usage_fault.isra.0>
 80014fa:	e7d5      	b.n	80014a8 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
 80014fc:	f10d 0207 	add.w	r2, sp, #7
 8001500:	2100      	movs	r1, #0
 8001502:	e7ce      	b.n	80014a2 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 8001504:	f10d 0107 	add.w	r1, sp, #7
 8001508:	2000      	movs	r0, #0
 800150a:	e7ec      	b.n	80014e6 <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800150c:	2400      	movs	r4, #0
 800150e:	e7cc      	b.n	80014aa <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001510:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	e7d8      	b.n	80014cc <z_arm_fault+0x90>
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00
 8001520:	e000ed29 	.word	0xe000ed29
 8001524:	e000ed2a 	.word	0xe000ed2a

08001528 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001528:	4a02      	ldr	r2, [pc, #8]	; (8001534 <z_arm_fault_init+0xc>)
 800152a:	6953      	ldr	r3, [r2, #20]
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800153a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800153c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
 800153e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001540:	d003      	beq.n	800154a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001542:	4903      	ldr	r1, [pc, #12]	; (8001550 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001548:	600a      	str	r2, [r1, #0]

0800154a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800154a:	4770      	bx	lr
	ldr r3, =_kernel
 800154c:	20000338 	.word	0x20000338
	ldr r1, =_SCS_ICSR
 8001550:	e000ed04 	.word	0xe000ed04

08001554 <z_arm_interrupt_init>:
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	2110      	movs	r1, #16
 800155a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800155c:	3301      	adds	r3, #1
 800155e:	2b52      	cmp	r3, #82	; 0x52
 8001560:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001564:	d1f9      	bne.n	800155a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100

0800156c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 800156c:	b508      	push	{r3, lr}
	if (_current == thread) {
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <z_impl_k_thread_abort+0x3c>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4283      	cmp	r3, r0
 8001574:	d107      	bne.n	8001586 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001576:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 800157a:	b193      	cbz	r3, 80015a2 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <z_impl_k_thread_abort+0x40>)
 800157e:	6853      	ldr	r3, [r2, #4]
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
 8001586:	f000 fe31 	bl	80021ec <z_thread_single_abort>
	__asm__ volatile(
 800158a:	f04f 0310 	mov.w	r3, #16
 800158e:	f3ef 8011 	mrs	r0, BASEPRI
 8001592:	f383 8811 	msr	BASEPRI, r3
 8001596:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
 800159a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
 800159e:	f001 bcd3 	b.w	8002f48 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
 80015a2:	f000 ff35 	bl	8002410 <z_self_abort>
 80015a6:	bf00      	nop
 80015a8:	20000338 	.word	0x20000338
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <z_arm_configure_static_mpu_regions+0xc>)
 80015b2:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <z_arm_configure_static_mpu_regions+0x10>)
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <z_arm_configure_static_mpu_regions+0x14>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	f000 b896 	b.w	80016e8 <arm_core_mpu_configure_static_mpu_regions>
 80015bc:	20018000 	.word	0x20018000
 80015c0:	20000000 	.word	0x20000000
 80015c4:	08003434 	.word	0x08003434

080015c8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80015c8:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 80015cc:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 80015ce:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80015d2:	2120      	movs	r1, #32
 80015d4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80015d8:	4618      	mov	r0, r3
 80015da:	2101      	movs	r1, #1
 80015dc:	f000 b88e 	b.w	80016fc <arm_core_mpu_configure_dynamic_mpu_regions>
 80015e0:	200002ac 	.word	0x200002ac
 80015e4:	150b0000 	.word	0x150b0000

080015e8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 80015ea:	4f1e      	ldr	r7, [pc, #120]	; (8001664 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80015ec:	2600      	movs	r6, #0
 80015ee:	428e      	cmp	r6, r1
 80015f0:	db01      	blt.n	80015f6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80015f2:	4610      	mov	r0, r2
 80015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 80015f6:	6844      	ldr	r4, [r0, #4]
 80015f8:	b384      	cbz	r4, 800165c <mpu_configure_regions+0x74>
		if (do_sanity_check &&
 80015fa:	b153      	cbz	r3, 8001612 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80015fc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8001600:	ea14 0f0c 	tst.w	r4, ip
 8001604:	d118      	bne.n	8001638 <mpu_configure_regions+0x50>
		&&
 8001606:	2c1f      	cmp	r4, #31
 8001608:	d916      	bls.n	8001638 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 800160a:	6805      	ldr	r5, [r0, #0]
		&&
 800160c:	ea1c 0f05 	tst.w	ip, r5
 8001610:	d112      	bne.n	8001638 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8001612:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8001614:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 8001616:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	d90f      	bls.n	800163e <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 800161e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8001622:	d80e      	bhi.n	8001642 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8001624:	3c01      	subs	r4, #1
 8001626:	fab4 f484 	clz	r4, r4
 800162a:	f1c4 041f 	rsb	r4, r4, #31
 800162e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8001630:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8001632:	ea4c 0404 	orr.w	r4, ip, r4
 8001636:	d906      	bls.n	8001646 <mpu_configure_regions+0x5e>
			return -EINVAL;
 8001638:	f06f 0215 	mvn.w	r2, #21
 800163c:	e7d9      	b.n	80015f2 <mpu_configure_regions+0xa>
		return REGION_32B;
 800163e:	2408      	movs	r4, #8
 8001640:	e7f6      	b.n	8001630 <mpu_configure_regions+0x48>
		return REGION_4G;
 8001642:	243e      	movs	r4, #62	; 0x3e
 8001644:	e7f4      	b.n	8001630 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001646:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 800164a:	4315      	orrs	r5, r2
 800164c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001650:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8001654:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001656:	60fd      	str	r5, [r7, #12]
		reg_index++;
 8001658:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800165a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
 800165c:	3601      	adds	r6, #1
 800165e:	300c      	adds	r0, #12
 8001660:	e7c5      	b.n	80015ee <mpu_configure_regions+0x6>
 8001662:	bf00      	nop
 8001664:	e000ed90 	.word	0xe000ed90

08001668 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <arm_core_mpu_enable+0x10>)
 800166a:	2205      	movs	r2, #5
 800166c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800166e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001672:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001676:	4770      	bx	lr
 8001678:	e000ed90 	.word	0xe000ed90

0800167c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800167c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001680:	4b01      	ldr	r3, [pc, #4]	; (8001688 <arm_core_mpu_disable+0xc>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
}
 8001686:	4770      	bx	lr
 8001688:	e000ed90 	.word	0xe000ed90

0800168c <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800168c:	4913      	ldr	r1, [pc, #76]	; (80016dc <arm_mpu_init+0x50>)
 800168e:	6808      	ldr	r0, [r1, #0]
 8001690:	2808      	cmp	r0, #8
{
 8001692:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8001694:	d81e      	bhi.n	80016d4 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8001696:	f7ff fff1 	bl	800167c <arm_core_mpu_disable>
	MPU->RNR = index;
 800169a:	4c11      	ldr	r4, [pc, #68]	; (80016e0 <arm_mpu_init+0x54>)
 800169c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800169e:	2200      	movs	r2, #0
 80016a0:	4290      	cmp	r0, r2
 80016a2:	f101 010c 	add.w	r1, r1, #12
 80016a6:	d105      	bne.n	80016b4 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <arm_mpu_init+0x58>)
 80016aa:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80016ac:	f7ff ffdc 	bl	8001668 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 80016b0:	2000      	movs	r0, #0
}
 80016b2:	bd10      	pop	{r4, pc}
 80016b4:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80016b6:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80016ba:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80016be:	4313      	orrs	r3, r2
 80016c0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80016c4:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80016c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80016d0:	3201      	adds	r2, #1
 80016d2:	e7e5      	b.n	80016a0 <arm_mpu_init+0x14>
		return -1;
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016d8:	e7eb      	b.n	80016b2 <arm_mpu_init+0x26>
 80016da:	bf00      	nop
 80016dc:	08003440 	.word	0x08003440
 80016e0:	e000ed90 	.word	0xe000ed90
 80016e4:	20000378 	.word	0x20000378

080016e8 <arm_core_mpu_configure_static_mpu_regions>:
{
 80016e8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80016ea:	4c03      	ldr	r4, [pc, #12]	; (80016f8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80016ec:	2301      	movs	r3, #1
 80016ee:	7822      	ldrb	r2, [r4, #0]
 80016f0:	f7ff ff7a 	bl	80015e8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80016f4:	7020      	strb	r0, [r4, #0]
}
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	20000378 	.word	0x20000378

080016fc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 80016fc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
 8001700:	2300      	movs	r3, #0
 8001702:	7812      	ldrb	r2, [r2, #0]
 8001704:	f7ff ff70 	bl	80015e8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001708:	f110 0f16 	cmn.w	r0, #22
 800170c:	d003      	beq.n	8001716 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 8001710:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8001712:	2807      	cmp	r0, #7
 8001714:	dd00      	ble.n	8001718 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 8001716:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8001718:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	3001      	adds	r0, #1
 800171e:	e7f8      	b.n	8001712 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8001720:	20000378 	.word	0x20000378
 8001724:	e000ed90 	.word	0xe000ed90

08001728 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8001728:	4b01      	ldr	r3, [pc, #4]	; (8001730 <__stdout_hook_install+0x8>)
 800172a:	6018      	str	r0, [r3, #0]
}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000018 	.word	0x20000018

08001734 <gpio_stm32_init>:
static int gpio_stm32_init(const struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config;
	struct gpio_stm32_data *data = device->data;

	data->dev = device;
 8001734:	68c3      	ldr	r3, [r0, #12]
{
 8001736:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_stm32_config *cfg = device->config;
 8001738:	6844      	ldr	r4, [r0, #4]
	data->dev = device;
 800173a:	6058      	str	r0, [r3, #4]
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <gpio_stm32_init+0x64>)
 800173e:	f000 fad1 	bl	8001ce4 <z_impl_device_get_binding>
 8001742:	6883      	ldr	r3, [r0, #8]
 8001744:	f104 010c 	add.w	r1, r4, #12
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4798      	blx	r3

	/* enable clock for subsystem */
	const struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 800174c:	bb00      	cbnz	r0, 8001790 <gpio_stm32_init+0x5c>
			     (clock_control_subsys_t *)&cfg->pclken) != 0) {
		return -EIO;
	}

#ifdef PWR_CR2_IOSV
	if (cfg->port == STM32_PORTG) {
 800174e:	68a3      	ldr	r3, [r4, #8]
 8001750:	2b06      	cmp	r3, #6
 8001752:	d109      	bne.n	8001768 <gpio_stm32_init+0x34>
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <gpio_stm32_init+0x68>)
 8001756:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001758:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800175c:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <gpio_stm32_init+0x6c>)
 800175e:	d005      	beq.n	800176c <gpio_stm32_init+0x38>
  * @rmtoll CR2          IOSV          LL_PWR_EnableVddIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001760:	6853      	ldr	r3, [r2, #4]
 8001762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001766:	6053      	str	r3, [r2, #4]
		z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8001768:	b002      	add	sp, #8
 800176a:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->APB1ENR1, Periphs);
 800176c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800176e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001772:	6599      	str	r1, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001774:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8001776:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800177a:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 800177c:	9901      	ldr	r1, [sp, #4]
 800177e:	6851      	ldr	r1, [r2, #4]
 8001780:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001784:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001786:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001788:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800178c:	659a      	str	r2, [r3, #88]	; 0x58
 800178e:	e7eb      	b.n	8001768 <gpio_stm32_init+0x34>
		return -EIO;
 8001790:	f06f 0004 	mvn.w	r0, #4
 8001794:	e7e8      	b.n	8001768 <gpio_stm32_init+0x34>
 8001796:	bf00      	nop
 8001798:	080035de 	.word	0x080035de
 800179c:	40021000 	.word	0x40021000
 80017a0:	40007000 	.word	0x40007000

080017a4 <gpio_stm32_pin_interrupt_configure>:
{
 80017a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80017a8:	460c      	mov	r4, r1
 80017aa:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 80017ac:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 80017b0:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80017b2:	68c2      	ldr	r2, [r0, #12]
{
 80017b4:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 80017b6:	d123      	bne.n	8001800 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80017b8:	f004 0303 	and.w	r3, r4, #3
 80017bc:	3304      	adds	r3, #4
 80017be:	009a      	lsls	r2, r3, #2
 80017c0:	230f      	movs	r3, #15
 80017c2:	4093      	lsls	r3, r2
 80017c4:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4936      	ldr	r1, [pc, #216]	; (80018a4 <gpio_stm32_pin_interrupt_configure+0x100>)
 80017cc:	3202      	adds	r2, #2
 80017ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017d2:	0c19      	lsrs	r1, r3, #16
 80017d4:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017dc:	fab2 f282 	clz	r2, r2
 80017e0:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d109      	bne.n	80017fc <gpio_stm32_pin_interrupt_configure+0x58>
			stm32_exti_disable(pin);
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff fa39 	bl	8000c60 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff fa8a 	bl	8000d08 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80017f4:	2100      	movs	r1, #0
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff fa40 	bl	8000c7c <stm32_exti_trigger>
	int err = 0;
 80017fc:	2500      	movs	r5, #0
 80017fe:	e043      	b.n	8001888 <gpio_stm32_pin_interrupt_configure+0xe4>
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001800:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8001804:	d048      	beq.n	8001898 <gpio_stm32_pin_interrupt_configure+0xf4>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001806:	4928      	ldr	r1, [pc, #160]	; (80018a8 <gpio_stm32_pin_interrupt_configure+0x104>)
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff fa6b 	bl	8000ce4 <stm32_exti_set_callback>
 800180e:	4605      	mov	r5, r0
 8001810:	2800      	cmp	r0, #0
 8001812:	d144      	bne.n	800189e <gpio_stm32_pin_interrupt_configure+0xfa>
	gpio_stm32_enable_int(cfg->port, pin);
 8001814:	68bf      	ldr	r7, [r7, #8]
 8001816:	4825      	ldr	r0, [pc, #148]	; (80018ac <gpio_stm32_pin_interrupt_configure+0x108>)
 8001818:	f000 fa64 	bl	8001ce4 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 800181c:	4924      	ldr	r1, [pc, #144]	; (80018b0 <gpio_stm32_pin_interrupt_configure+0x10c>)
 800181e:	4603      	mov	r3, r0
 8001820:	c903      	ldmia	r1, {r0, r1}
 8001822:	466a      	mov	r2, sp
 8001824:	e882 0003 	stmia.w	r2, {r0, r1}
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	4618      	mov	r0, r3
 800182c:	f8d1 8000 	ldr.w	r8, [r1]
 8001830:	4611      	mov	r1, r2
 8001832:	47c0      	blx	r8
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001834:	f004 0103 	and.w	r1, r4, #3
 8001838:	3104      	adds	r1, #4
 800183a:	008b      	lsls	r3, r1, #2
 800183c:	210f      	movs	r1, #15
 800183e:	4099      	lsls	r1, r3
 8001840:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800184c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001850:	0c0b      	lsrs	r3, r1, #16
 8001852:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 8001860:	409f      	lsls	r7, r3
 8001862:	430f      	orrs	r7, r1
	switch (trig) {
 8001864:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8001868:	6097      	str	r7, [r2, #8]
 800186a:	d011      	beq.n	8001890 <gpio_stm32_pin_interrupt_configure+0xec>
 800186c:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 8001870:	d010      	beq.n	8001894 <gpio_stm32_pin_interrupt_configure+0xf0>
 8001872:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8001876:	bf14      	ite	ne
 8001878:	2100      	movne	r1, #0
 800187a:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff f9fd 	bl	8000c7c <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8001882:	4620      	mov	r0, r4
 8001884:	f7ff f9de 	bl	8000c44 <stm32_exti_enable>
}
 8001888:	4628      	mov	r0, r5
 800188a:	b002      	add	sp, #8
 800188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8001890:	2101      	movs	r1, #1
 8001892:	e7f3      	b.n	800187c <gpio_stm32_pin_interrupt_configure+0xd8>
		edge = STM32_EXTI_TRIG_BOTH;
 8001894:	2103      	movs	r1, #3
 8001896:	e7f1      	b.n	800187c <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -ENOTSUP;
 8001898:	f06f 0522 	mvn.w	r5, #34	; 0x22
 800189c:	e7f4      	b.n	8001888 <gpio_stm32_pin_interrupt_configure+0xe4>
		err = -EBUSY;
 800189e:	f06f 050f 	mvn.w	r5, #15
	return err;
 80018a2:	e7f1      	b.n	8001888 <gpio_stm32_pin_interrupt_configure+0xe4>
 80018a4:	40010000 	.word	0x40010000
 80018a8:	08002b83 	.word	0x08002b83
 80018ac:	080035de 	.word	0x080035de
 80018b0:	08003400 	.word	0x08003400

080018b4 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80018b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80018b8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80018bc:	68c7      	ldr	r7, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80018be:	4645      	mov	r5, r8
{
 80018c0:	4606      	mov	r6, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80018c2:	f855 4b08 	ldr.w	r4, [r5], #8
 80018c6:	482b      	ldr	r0, [pc, #172]	; (8001974 <uart_stm32_init+0xc0>)
 80018c8:	f000 fa0c 	bl	8001ce4 <z_impl_device_get_binding>
 80018cc:	6883      	ldr	r3, [r0, #8]
	data->clock = clk;
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	4629      	mov	r1, r5
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 80018d6:	4605      	mov	r5, r0
 80018d8:	2800      	cmp	r0, #0
 80018da:	d147      	bne.n	800196c <uart_stm32_init+0xb8>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 80018dc:	6873      	ldr	r3, [r6, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 80018de:	e9d8 0106 	ldrd	r0, r1, [r8, #24]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	f7ff faf8 	bl	8000ed8 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 80018e8:	2800      	cmp	r0, #0
 80018ea:	db33      	blt.n	8001954 <uart_stm32_init+0xa0>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f043 030c 	orr.w	r3, r3, #12
 80018fa:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 80018fc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d029      	beq.n	8001958 <uart_stm32_init+0xa4>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8001904:	2b01      	cmp	r3, #1
 8001906:	d02c      	beq.n	8001962 <uart_stm32_init+0xae>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8001908:	462b      	mov	r3, r5
		ll_parity = LL_USART_PARITY_NONE;
 800190a:	4628      	mov	r0, r5
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001912:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001916:	4303      	orrs	r3, r0
 8001918:	4313      	orrs	r3, r2
 800191a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800191c:	6863      	ldr	r3, [r4, #4]
 800191e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001922:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8001924:	f898 3010 	ldrb.w	r3, [r8, #16]
 8001928:	b12b      	cbz	r3, 8001936 <uart_stm32_init+0x82>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800192a:	6873      	ldr	r3, [r6, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800192e:	6893      	ldr	r3, [r2, #8]
 8001930:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001934:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	4630      	mov	r0, r6
 800193a:	f001 fa44 	bl	8002dc6 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001946:	69e3      	ldr	r3, [r4, #28]
 8001948:	029a      	lsls	r2, r3, #10
 800194a:	d5fc      	bpl.n	8001946 <uart_stm32_init+0x92>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800194c:	69e3      	ldr	r3, [r4, #28]
 800194e:	025b      	lsls	r3, r3, #9
 8001950:	d5fc      	bpl.n	800194c <uart_stm32_init+0x98>
#endif /* !USART_ISR_REACK */

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
 8001952:	2000      	movs	r0, #0
}
 8001954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800195c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001960:	e7d4      	b.n	800190c <uart_stm32_init+0x58>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8001966:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800196a:	e7cf      	b.n	800190c <uart_stm32_init+0x58>
		return -EIO;
 800196c:	f06f 0004 	mvn.w	r0, #4
 8001970:	e7f0      	b.n	8001954 <uart_stm32_init+0xa0>
 8001972:	bf00      	nop
 8001974:	080035de 	.word	0x080035de

08001978 <uart_stm32_configure>:
{
 8001978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800197c:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800197e:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001980:	68c6      	ldr	r6, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001982:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8001984:	2a01      	cmp	r2, #1
{
 8001986:	460d      	mov	r5, r1
	switch (parity) {
 8001988:	f000 8081 	beq.w	8001a8e <uart_stm32_configure+0x116>
		return LL_USART_PARITY_NONE;
 800198c:	2a02      	cmp	r2, #2
 800198e:	bf0c      	ite	eq
 8001990:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8001994:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001996:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 800199a:	f895 8006 	ldrb.w	r8, [r5, #6]
 800199e:	f1b9 0f02 	cmp.w	r9, #2
 80019a2:	bf96      	itet	ls
 80019a4:	4b3e      	ldrls	r3, [pc, #248]	; (8001aa0 <uart_stm32_configure+0x128>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80019a6:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 80019aa:	f833 e019 	ldrhls.w	lr, [r3, r9, lsl #1]
	switch (db) {
 80019ae:	f1b8 0f02 	cmp.w	r8, #2
 80019b2:	d06f      	beq.n	8001a94 <uart_stm32_configure+0x11c>
		return LL_USART_DATAWIDTH_8B;
 80019b4:	f1b8 0f04 	cmp.w	r8, #4
 80019b8:	bf0c      	ite	eq
 80019ba:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80019be:	2300      	movne	r3, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80019c0:	79ef      	ldrb	r7, [r5, #7]
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80019c2:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 80019c4:	2f01      	cmp	r7, #1
 80019c6:	bf14      	ite	ne
 80019c8:	f04f 0c00 	movne.w	ip, #0
 80019cc:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80019d0:	2a01      	cmp	r2, #1
 80019d2:	d962      	bls.n	8001a9a <uart_stm32_configure+0x122>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 80019d4:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80019d8:	d05f      	beq.n	8001a9a <uart_stm32_configure+0x122>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 80019da:	f1b8 0f01 	cmp.w	r8, #1
 80019de:	d95c      	bls.n	8001a9a <uart_stm32_configure+0x122>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 80019e0:	b1c7      	cbz	r7, 8001a14 <uart_stm32_configure+0x9c>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80019e2:	4a30      	ldr	r2, [pc, #192]	; (8001aa4 <uart_stm32_configure+0x12c>)
 80019e4:	4294      	cmp	r4, r2
 80019e6:	d013      	beq.n	8001a10 <uart_stm32_configure+0x98>
 80019e8:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80019ec:	4294      	cmp	r4, r2
 80019ee:	d00f      	beq.n	8001a10 <uart_stm32_configure+0x98>
 80019f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019f4:	4294      	cmp	r4, r2
 80019f6:	d00b      	beq.n	8001a10 <uart_stm32_configure+0x98>
 80019f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019fc:	4294      	cmp	r4, r2
 80019fe:	d007      	beq.n	8001a10 <uart_stm32_configure+0x98>
 8001a00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a04:	4294      	cmp	r4, r2
 8001a06:	d003      	beq.n	8001a10 <uart_stm32_configure+0x98>
 8001a08:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001a0c:	4294      	cmp	r4, r2
 8001a0e:	d144      	bne.n	8001a9a <uart_stm32_configure+0x122>
 8001a10:	2f01      	cmp	r7, #1
 8001a12:	d142      	bne.n	8001a9a <uart_stm32_configure+0x122>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001a14:	6822      	ldr	r2, [r4, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	6022      	str	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001a22:	428a      	cmp	r2, r1
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001a24:	bf1f      	itttt	ne
 8001a26:	6827      	ldrne	r7, [r4, #0]
 8001a28:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8001a2c:	430f      	orrne	r7, r1
 8001a2e:	6027      	strne	r7, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001a30:	6862      	ldr	r2, [r4, #4]
 8001a32:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001a36:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a38:	bf1f      	itttt	ne
 8001a3a:	6861      	ldrne	r1, [r4, #4]
 8001a3c:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8001a40:	ea41 010e 	orrne.w	r1, r1, lr
 8001a44:	6061      	strne	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001a46:	6822      	ldr	r2, [r4, #0]
	if (cfg->baudrate != data->baud_rate) {
 8001a48:	6829      	ldr	r1, [r5, #0]
 8001a4a:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8001a4e:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001a50:	bf1f      	itttt	ne
 8001a52:	6822      	ldrne	r2, [r4, #0]
 8001a54:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 8001a58:	431a      	orrne	r2, r3
 8001a5a:	6022      	strne	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001a5c:	68a3      	ldr	r3, [r4, #8]
 8001a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001a62:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a64:	bf1f      	itttt	ne
 8001a66:	68a3      	ldrne	r3, [r4, #8]
 8001a68:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8001a6c:	ea43 030c 	orrne.w	r3, r3, ip
 8001a70:	60a3      	strne	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 8001a72:	6833      	ldr	r3, [r6, #0]
 8001a74:	4299      	cmp	r1, r3
 8001a76:	d003      	beq.n	8001a80 <uart_stm32_configure+0x108>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001a78:	f001 f9a5 	bl	8002dc6 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6023      	str	r3, [r4, #0]
	return 0;
 8001a88:	2000      	movs	r0, #0
};
 8001a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (parity) {
 8001a8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001a92:	e780      	b.n	8001996 <uart_stm32_configure+0x1e>
	switch (db) {
 8001a94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a98:	e792      	b.n	80019c0 <uart_stm32_configure+0x48>
		return -ENOTSUP;
 8001a9a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001a9e:	e7f4      	b.n	8001a8a <uart_stm32_configure+0x112>
 8001aa0:	080035b0 	.word	0x080035b0
 8001aa4:	40013800 	.word	0x40013800

08001aa8 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <UTILS_PLL_IsBusy+0x24>)
 8001aaa:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8001aac:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLSAI2RDY    LL_RCC_PLLSAI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI2_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 8001aae:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001ab0:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8001ab4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	bf14      	ite	ne
 8001abc:	2001      	movne	r0, #1
 8001abe:	2000      	moveq	r0, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 8001ac0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 8001ac4:	bf18      	it	ne
 8001ac6:	2001      	movne	r0, #1
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <LL_SetFlashLatency+0x7c>)
 8001ad2:	1e42      	subs	r2, r0, #1
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d833      	bhi.n	8001b40 <LL_SetFlashLatency+0x70>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <LL_SetFlashLatency+0x80>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae4:	d10f      	bne.n	8001b06 <LL_SetFlashLatency+0x36>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <LL_SetFlashLatency+0x84>)
 8001ae8:	4298      	cmp	r0, r3
 8001aea:	d81a      	bhi.n	8001b22 <LL_SetFlashLatency+0x52>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <LL_SetFlashLatency+0x88>)
 8001aee:	4298      	cmp	r0, r3
 8001af0:	d828      	bhi.n	8001b44 <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <LL_SetFlashLatency+0x8c>)
 8001af4:	4298      	cmp	r0, r3
 8001af6:	d827      	bhi.n	8001b48 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <LL_SetFlashLatency+0x90>)
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8001afa:	4298      	cmp	r0, r3
 8001afc:	bf94      	ite	ls
 8001afe:	2300      	movls	r3, #0
 8001b00:	2301      	movhi	r3, #1
  ErrorStatus status = SUCCESS;
 8001b02:	2000      	movs	r0, #0
 8001b04:	e011      	b.n	8001b2a <LL_SetFlashLatency+0x5a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <LL_SetFlashLatency+0x94>)
 8001b08:	4298      	cmp	r0, r3
 8001b0a:	d80c      	bhi.n	8001b26 <LL_SetFlashLatency+0x56>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8001b0c:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 8001b10:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 8001b14:	4298      	cmp	r0, r3
 8001b16:	d815      	bhi.n	8001b44 <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <LL_SetFlashLatency+0x98>)
 8001b1a:	4298      	cmp	r0, r3
 8001b1c:	d814      	bhi.n	8001b48 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <LL_SetFlashLatency+0x9c>)
 8001b20:	e7eb      	b.n	8001afa <LL_SetFlashLatency+0x2a>
        latency = LL_FLASH_LATENCY_4;
 8001b22:	2304      	movs	r3, #4
 8001b24:	e7ed      	b.n	8001b02 <LL_SetFlashLatency+0x32>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001b26:	2300      	movs	r3, #0
        status = ERROR;
 8001b28:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b2a:	4911      	ldr	r1, [pc, #68]	; (8001b70 <LL_SetFlashLatency+0xa0>)
 8001b2c:	680a      	ldr	r2, [r1, #0]
 8001b2e:	f022 0207 	bic.w	r2, r2, #7
 8001b32:	431a      	orrs	r2, r3
 8001b34:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b36:	680a      	ldr	r2, [r1, #0]
 8001b38:	f002 0207 	and.w	r2, r2, #7
    if(LL_FLASH_GetLatency() != latency)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d000      	beq.n	8001b42 <LL_SetFlashLatency+0x72>
      status = ERROR;
 8001b40:	2001      	movs	r0, #1
}
 8001b42:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e7dc      	b.n	8001b02 <LL_SetFlashLatency+0x32>
        latency = LL_FLASH_LATENCY_2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e7da      	b.n	8001b02 <LL_SetFlashLatency+0x32>
 8001b4c:	04c4b3ff 	.word	0x04c4b3ff
 8001b50:	40007000 	.word	0x40007000
 8001b54:	03d09000 	.word	0x03d09000
 8001b58:	02dc6c00 	.word	0x02dc6c00
 8001b5c:	01e84800 	.word	0x01e84800
 8001b60:	00f42400 	.word	0x00f42400
 8001b64:	018cba80 	.word	0x018cba80
 8001b68:	00b71b00 	.word	0x00b71b00
 8001b6c:	005b8d80 	.word	0x005b8d80
 8001b70:	40022000 	.word	0x40022000

08001b74 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001b74:	680b      	ldr	r3, [r1, #0]
 8001b76:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <UTILS_EnablePLLAndSwitchSystem+0x88>)
 8001b78:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8001b7c:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8001b80:	4e1f      	ldr	r6, [pc, #124]	; (8001c00 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001b82:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8001b86:	6833      	ldr	r3, [r6, #0]
 8001b88:	42a3      	cmp	r3, r4
{
 8001b8a:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8001b8c:	d328      	bcc.n	8001be0 <UTILS_EnablePLLAndSwitchSystem+0x6c>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001b96:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001b9e:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	0192      	lsls	r2, r2, #6
 8001ba4:	d5fc      	bpl.n	8001ba0 <UTILS_EnablePLLAndSwitchSystem+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	6829      	ldr	r1, [r5, #0]
 8001baa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	f042 0203 	orr.w	r2, r2, #3
 8001bb8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001bc0:	2a0c      	cmp	r2, #12
 8001bc2:	d1fa      	bne.n	8001bba <UTILS_EnablePLLAndSwitchSystem+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	6869      	ldr	r1, [r5, #4]
 8001bc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	68a9      	ldr	r1, [r5, #8]
 8001bd4:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	609a      	str	r2, [r3, #8]
}
 8001bdc:	2000      	movs	r0, #0
 8001bde:	e004      	b.n	8001bea <UTILS_EnablePLLAndSwitchSystem+0x76>
    status = LL_SetFlashLatency(hclk_frequency);
 8001be0:	4620      	mov	r0, r4
 8001be2:	f7ff ff75 	bl	8001ad0 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d0d1      	beq.n	8001b8e <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8001bea:	6833      	ldr	r3, [r6, #0]
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	d902      	bls.n	8001bf6 <UTILS_EnablePLLAndSwitchSystem+0x82>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff ff6d 	bl	8001ad0 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8001bf6:	b900      	cbnz	r0, 8001bfa <UTILS_EnablePLLAndSwitchSystem+0x86>
  SystemCoreClock = HCLKFrequency;
 8001bf8:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}
 8001bfc:	0800363c 	.word	0x0800363c
 8001c00:	2000002c 	.word	0x2000002c
 8001c04:	40021000 	.word	0x40021000

08001c08 <LL_PLL_ConfigSystemClock_HSI>:
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	460c      	mov	r4, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8001c0e:	f7ff ff4b 	bl	8001aa8 <UTILS_PLL_IsBusy>
 8001c12:	bb00      	cbnz	r0, 8001c56 <LL_PLL_ConfigSystemClock_HSI+0x4e>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8001c14:	4629      	mov	r1, r5
 8001c16:	4811      	ldr	r0, [pc, #68]	; (8001c5c <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8001c18:	f001 f95f 	bl	8002eda <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001c1c:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <LL_PLL_ConfigSystemClock_HSI+0x58>)
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	0559      	lsls	r1, r3, #21
 8001c22:	d406      	bmi.n	8001c32 <LL_PLL_ConfigSystemClock_HSI+0x2a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c24:	6813      	ldr	r3, [r2, #0]
 8001c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	055b      	lsls	r3, r3, #21
 8001c30:	d5fc      	bpl.n	8001c2c <LL_PLL_ConfigSystemClock_HSI+0x24>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001c32:	68d6      	ldr	r6, [r2, #12]
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 8001c36:	6869      	ldr	r1, [r5, #4]
 8001c38:	4033      	ands	r3, r6
 8001c3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c3e:	6829      	ldr	r1, [r5, #0]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	68a9      	ldr	r1, [r5, #8]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	f043 0302 	orr.w	r3, r3, #2
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	60d3      	str	r3, [r2, #12]
}
 8001c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001c52:	f7ff bf8f 	b.w	8001b74 <UTILS_EnablePLLAndSwitchSystem>
}
 8001c56:	2001      	movs	r0, #1
 8001c58:	bd70      	pop	{r4, r5, r6, pc}
 8001c5a:	bf00      	nop
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	f9ff808c 	.word	0xf9ff808c

08001c68 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8001c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
 8001c6c:	4f10      	ldr	r7, [pc, #64]	; (8001cb0 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001c6e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8001c72:	3001      	adds	r0, #1
 8001c74:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001c78:	42ae      	cmp	r6, r5
 8001c7a:	d800      	bhi.n	8001c7e <z_sys_init_run_level+0x16>
		}
	}
}
 8001c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
 8001c7e:	e9d5 3400 	ldrd	r3, r4, [r5]
 8001c82:	4620      	mov	r0, r4
 8001c84:	4798      	blx	r3
 8001c86:	b170      	cbz	r0, 8001ca6 <z_sys_init_run_level+0x3e>
 8001c88:	b16c      	cbz	r4, 8001ca6 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
 8001c8a:	1be4      	subs	r4, r4, r7
 8001c8c:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 8001c8e:	0961      	lsrs	r1, r4, #5
 8001c90:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <z_sys_init_run_level+0x4c>)
 8001c92:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8001c96:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	fa03 f404 	lsl.w	r4, r3, r4
 8001ca0:	4304      	orrs	r4, r0
 8001ca2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001ca6:	3508      	adds	r5, #8
 8001ca8:	e7e6      	b.n	8001c78 <z_sys_init_run_level+0x10>
 8001caa:	bf00      	nop
 8001cac:	08003598 	.word	0x08003598
 8001cb0:	20000038 	.word	0x20000038
 8001cb4:	20000108 	.word	0x20000108

08001cb8 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <z_device_ready+0x24>)
 8001cba:	1ac0      	subs	r0, r0, r3
 8001cbc:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <z_device_ready+0x28>)
 8001cc0:	0942      	lsrs	r2, r0, #5
 8001cc2:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8001cc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
 8001cca:	2301      	movs	r3, #1
 8001ccc:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
 8001cd0:	4210      	tst	r0, r2
}
 8001cd2:	bf0c      	ite	eq
 8001cd4:	4618      	moveq	r0, r3
 8001cd6:	2000      	movne	r0, #0
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000038 	.word	0x20000038
 8001ce0:	20000108 	.word	0x20000108

08001ce4 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
 8001ce4:	4911      	ldr	r1, [pc, #68]	; (8001d2c <z_impl_device_get_binding+0x48>)
{
 8001ce6:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
 8001ce8:	4c11      	ldr	r4, [pc, #68]	; (8001d30 <z_impl_device_get_binding+0x4c>)
{
 8001cea:	4605      	mov	r5, r0
 8001cec:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
 8001cee:	428c      	cmp	r4, r1
 8001cf0:	d104      	bne.n	8001cfc <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001cf2:	4c0f      	ldr	r4, [pc, #60]	; (8001d30 <z_impl_device_get_binding+0x4c>)
 8001cf4:	42b4      	cmp	r4, r6
 8001cf6:	d10a      	bne.n	8001d0e <z_impl_device_get_binding+0x2a>
	return NULL;
 8001cf8:	2400      	movs	r4, #0
 8001cfa:	e014      	b.n	8001d26 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff ffdb 	bl	8001cb8 <z_device_ready>
 8001d02:	b110      	cbz	r0, 8001d0a <z_impl_device_get_binding+0x26>
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	42ab      	cmp	r3, r5
 8001d08:	d00d      	beq.n	8001d26 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001d0a:	3410      	adds	r4, #16
 8001d0c:	e7ef      	b.n	8001cee <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff ffd2 	bl	8001cb8 <z_device_ready>
 8001d14:	b908      	cbnz	r0, 8001d1a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001d16:	3410      	adds	r4, #16
 8001d18:	e7ec      	b.n	8001cf4 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001d1a:	6821      	ldr	r1, [r4, #0]
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	f000 fed3 	bl	8002ac8 <strcmp>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d1f7      	bne.n	8001d16 <z_impl_device_get_binding+0x32>
}
 8001d26:	4620      	mov	r0, r4
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000108 	.word	0x20000108
 8001d30:	20000038 	.word	0x20000038

08001d34 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <z_bss_zero+0xc>)
 8001d36:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <z_bss_zero+0x10>)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	1a12      	subs	r2, r2, r0
 8001d3c:	f000 befb 	b.w	8002b36 <memset>
 8001d40:	20000110 	.word	0x20000110
 8001d44:	2000037c 	.word	0x2000037c

08001d48 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8001d48:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <bg_thread_main+0x2c>)
 8001d4c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001d4e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8001d50:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001d52:	f7ff ff89 	bl	8001c68 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8001d56:	f000 fb6f 	bl	8002438 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	f7ff ff84 	bl	8001c68 <z_sys_init_run_level>

	z_init_static_threads();
 8001d60:	f000 fb0a 	bl	8002378 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);
	
	main();
 8001d64:	f000 fce4 	bl	8002730 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001d68:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <bg_thread_main+0x30>)
 8001d6a:	7b13      	ldrb	r3, [r2, #12]
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001d72:	bd08      	pop	{r3, pc}
 8001d74:	20000379 	.word	0x20000379
 8001d78:	20000190 	.word	0x20000190

08001d7c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8001d7c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8001d80:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8001e78 <z_cstart+0xfc>
 8001d84:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001d86:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8001d8a:	4d33      	ldr	r5, [pc, #204]	; (8001e58 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
 8001d8c:	4e33      	ldr	r6, [pc, #204]	; (8001e5c <z_cstart+0xe0>)
 8001d8e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001d90:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8001e7c <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
 8001d94:	4f32      	ldr	r7, [pc, #200]	; (8001e60 <z_cstart+0xe4>)
 8001d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	2400      	movs	r4, #0
 8001d9c:	616b      	str	r3, [r5, #20]
 8001d9e:	23f0      	movs	r3, #240	; 0xf0
 8001da0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8001da4:	77ec      	strb	r4, [r5, #31]
 8001da6:	762c      	strb	r4, [r5, #24]
 8001da8:	766c      	strb	r4, [r5, #25]
 8001daa:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8001dac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001dae:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001db2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8001db4:	f7ff fbb8 	bl	8001528 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8001db8:	f7ff fa70 	bl	800129c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8001dc2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8001dc4:	4d27      	ldr	r5, [pc, #156]	; (8001e64 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
 8001dc6:	f240 1301 	movw	r3, #257	; 0x101
 8001dca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8001dce:	ab06      	add	r3, sp, #24
 8001dd0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8001dd2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
 8001dd4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8001dd8:	f7ff ff46 	bl	8001c68 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7ff ff43 	bl	8001c68 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001de2:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 8001de6:	f000 fa83 	bl	80022f0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 8001dec:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001dee:	491f      	ldr	r1, [pc, #124]	; (8001e6c <z_cstart+0xf0>)
 8001df0:	9305      	str	r3, [sp, #20]
 8001df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df6:	4653      	mov	r3, sl
 8001df8:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 8001dfc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001e00:	9400      	str	r4, [sp, #0]
 8001e02:	4630      	mov	r0, r6
 8001e04:	f000 fa86 	bl	8002314 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001e08:	7b73      	ldrb	r3, [r6, #13]
 8001e0a:	4680      	mov	r8, r0
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 8001e10:	4630      	mov	r0, r6
 8001e12:	7373      	strb	r3, [r6, #13]
 8001e14:	f001 f8c0 	bl	8002f98 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 8001e18:	230f      	movs	r3, #15
 8001e1a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8001e1e:	4914      	ldr	r1, [pc, #80]	; (8001e70 <z_cstart+0xf4>)
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <z_cstart+0xf8>)
 8001e22:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e26:	e9cd b404 	strd	fp, r4, [sp, #16]
 8001e2a:	e9cd 5400 	strd	r5, r4, [sp]
 8001e2e:	4638      	mov	r0, r7
 8001e30:	f000 fa70 	bl	8002314 <z_setup_new_thread>
 8001e34:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8001e36:	60ef      	str	r7, [r5, #12]
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8001e3e:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
 8001e42:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
 8001e46:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
 8001e48:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8001e4c:	4652      	mov	r2, sl
 8001e4e:	4641      	mov	r1, r8
 8001e50:	4630      	mov	r0, r6
 8001e52:	f7ff fa09 	bl	8001268 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	20000190 	.word	0x20000190
 8001e60:	20000110 	.word	0x20000110
 8001e64:	20000338 	.word	0x20000338
 8001e68:	0800364c 	.word	0x0800364c
 8001e6c:	20000380 	.word	0x20000380
 8001e70:	200007a0 	.word	0x200007a0
 8001e74:	08003079 	.word	0x08003079
 8001e78:	20001120 	.word	0x20001120
 8001e7c:	08001d49 	.word	0x08001d49

08001e80 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8001e80:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8001e82:	4c08      	ldr	r4, [pc, #32]	; (8001ea4 <z_reset_time_slice+0x24>)
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	b15b      	cbz	r3, 8001ea0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8001e88:	f7ff f91e 	bl	80010c8 <z_clock_elapsed>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	6820      	ldr	r0, [r4, #0]
 8001e90:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <z_reset_time_slice+0x28>)
 8001e92:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8001e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8001e98:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f001 b8d2 	b.w	8003044 <z_set_timeout_expiry>
}
 8001ea0:	bd10      	pop	{r4, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000370 	.word	0x20000370
 8001ea8:	20000338 	.word	0x20000338

08001eac <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8001eac:	b510      	push	{r4, lr}
 8001eae:	f04f 0310 	mov.w	r3, #16
 8001eb2:	f3ef 8411 	mrs	r4, BASEPRI
 8001eb6:	f383 8811 	msr	BASEPRI, r3
 8001eba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <k_sched_time_slice_set+0x34>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
 8001ec4:	230a      	movs	r3, #10
 8001ec6:	4358      	muls	r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <k_sched_time_slice_set+0x38>)
 8001eca:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <k_sched_time_slice_set+0x3c>)
 8001ece:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8001ed0:	f7ff ffd6 	bl	8001e80 <z_reset_time_slice>
	__asm__ volatile(
 8001ed4:	f384 8811 	msr	BASEPRI, r4
 8001ed8:	f3bf 8f6f 	isb	sy
	}
}
 8001edc:	bd10      	pop	{r4, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000338 	.word	0x20000338
 8001ee4:	20000370 	.word	0x20000370
 8001ee8:	2000036c 	.word	0x2000036c

08001eec <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8001eec:	b949      	cbnz	r1, 8001f02 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eee:	f3ef 8005 	mrs	r0, IPSR
 8001ef2:	b930      	cbnz	r0, 8001f02 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8001ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <z_reschedule+0x16>
	ret = arch_swap(key);
 8001efe:	f7ff b901 	b.w	8001104 <arch_swap>
 8001f02:	f381 8811 	msr	BASEPRI, r1
 8001f06:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000338 	.word	0x20000338

08001f10 <k_sched_lock>:
	__asm__ volatile(
 8001f10:	f04f 0310 	mov.w	r3, #16
 8001f14:	f3ef 8111 	mrs	r1, BASEPRI
 8001f18:	f383 8811 	msr	BASEPRI, r3
 8001f1c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <k_sched_lock+0x24>)
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	7bd3      	ldrb	r3, [r2, #15]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8001f2a:	f381 8811 	msr	BASEPRI, r1
 8001f2e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 8001f32:	4770      	bx	lr
 8001f34:	20000338 	.word	0x20000338

08001f38 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <z_priq_dumb_remove+0x28>)
 8001f3a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001f3e:	4282      	cmp	r2, r0
 8001f40:	d105      	bne.n	8001f4e <z_priq_dumb_remove+0x16>
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d102      	bne.n	8001f4e <z_priq_dumb_remove+0x16>
 8001f48:	7b4b      	ldrb	r3, [r1, #13]
 8001f4a:	06db      	lsls	r3, r3, #27
 8001f4c:	d106      	bne.n	8001f5c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8001f4e:	e9d1 3200 	ldrd	r3, r2, [r1]
 8001f52:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8001f54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8001f56:	2300      	movs	r3, #0
	node->prev = NULL;
 8001f58:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000338 	.word	0x20000338

08001f64 <update_cache>:
{
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4c12      	ldr	r4, [pc, #72]	; (8001fb0 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
 8001f68:	6923      	ldr	r3, [r4, #16]
 8001f6a:	68a2      	ldr	r2, [r4, #8]
{
 8001f6c:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
 8001f6e:	b10b      	cbz	r3, 8001f74 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
 8001f70:	68e5      	ldr	r5, [r4, #12]
 8001f72:	e00c      	b.n	8001f8e <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8001f74:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001f78:	f001 f808 	bl	8002f8c <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8001f7c:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8001f7e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8001f80:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
 8001f82:	bf44      	itt	mi
 8001f84:	f043 0308 	orrmi.w	r3, r3, #8
 8001f88:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
 8001f8a:	2d00      	cmp	r5, #0
 8001f8c:	d0f0      	beq.n	8001f70 <update_cache+0xc>
	if (preempt_ok != 0) {
 8001f8e:	b949      	cbnz	r1, 8001fa4 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
 8001f90:	7b53      	ldrb	r3, [r2, #13]
 8001f92:	06db      	lsls	r3, r3, #27
 8001f94:	d106      	bne.n	8001fa4 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8001f96:	69ab      	ldr	r3, [r5, #24]
 8001f98:	b923      	cbnz	r3, 8001fa4 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
 8001f9a:	89d3      	ldrh	r3, [r2, #14]
 8001f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f9e:	d901      	bls.n	8001fa4 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
 8001fa0:	6262      	str	r2, [r4, #36]	; 0x24
}
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8001fa4:	4295      	cmp	r5, r2
 8001fa6:	d001      	beq.n	8001fac <update_cache+0x48>
			z_reset_time_slice();
 8001fa8:	f7ff ff6a 	bl	8001e80 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8001fac:	6265      	str	r5, [r4, #36]	; 0x24
}
 8001fae:	e7f8      	b.n	8001fa2 <update_cache+0x3e>
 8001fb0:	20000338 	.word	0x20000338

08001fb4 <k_sched_unlock>:
{
 8001fb4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001fb6:	f04f 0310 	mov.w	r3, #16
 8001fba:	f3ef 8411 	mrs	r4, BASEPRI
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <k_sched_unlock+0x34>)
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	7bd3      	ldrb	r3, [r2, #15]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff ffc7 	bl	8001f64 <update_cache>
	__asm__ volatile(
 8001fd6:	f384 8811 	msr	BASEPRI, r4
 8001fda:	f3bf 8f6f 	isb	sy
}
 8001fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8001fe2:	f000 bfbd 	b.w	8002f60 <z_reschedule_unlocked>
 8001fe6:	bf00      	nop
 8001fe8:	20000338 	.word	0x20000338

08001fec <ready_thread>:
{
 8001fec:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8001fee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
 8001ff2:	7b43      	ldrb	r3, [r0, #13]
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	db29      	blt.n	800204c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8001ff8:	06db      	lsls	r3, r3, #27
 8001ffa:	d127      	bne.n	800204c <ready_thread+0x60>
 8001ffc:	6983      	ldr	r3, [r0, #24]
 8001ffe:	bb2b      	cbnz	r3, 800204c <ready_thread+0x60>
	return list->head == list;
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <ready_thread+0x64>)
 8002002:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002006:	f102 0128 	add.w	r1, r2, #40	; 0x28
 800200a:	428b      	cmp	r3, r1
 800200c:	d018      	beq.n	8002040 <ready_thread+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800200e:	b1bb      	cbz	r3, 8002040 <ready_thread+0x54>
	if (thread_1->base.prio < thread_2->base.prio) {
 8002010:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8002014:	f993 600e 	ldrsb.w	r6, [r3, #14]
 8002018:	42ae      	cmp	r6, r5
 800201a:	dd0c      	ble.n	8002036 <ready_thread+0x4a>
	node->prev = successor->prev;
 800201c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800201e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 8002022:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8002024:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 8002026:	7b43      	ldrb	r3, [r0, #13]
 8002028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800202c:	7343      	strb	r3, [r0, #13]
}
 800202e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff bf97 	b.w	8001f64 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002036:	429c      	cmp	r4, r3
 8002038:	d002      	beq.n	8002040 <ready_thread+0x54>
 800203a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e9      	bne.n	8002014 <ready_thread+0x28>
	node->prev = list->tail;
 8002040:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
 8002044:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002046:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8002048:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 800204a:	e7ec      	b.n	8002026 <ready_thread+0x3a>
}
 800204c:	bc70      	pop	{r4, r5, r6}
 800204e:	4770      	bx	lr
 8002050:	20000338 	.word	0x20000338

08002054 <z_sched_start>:
{
 8002054:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002056:	f04f 0210 	mov.w	r2, #16
 800205a:	f3ef 8411 	mrs	r4, BASEPRI
 800205e:	f382 8811 	msr	BASEPRI, r2
 8002062:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
 8002066:	7b42      	ldrb	r2, [r0, #13]
 8002068:	0751      	lsls	r1, r2, #29
 800206a:	d404      	bmi.n	8002076 <z_sched_start+0x22>
	__asm__ volatile(
 800206c:	f384 8811 	msr	BASEPRI, r4
 8002070:	f3bf 8f6f 	isb	sy
}
 8002074:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002076:	f022 0204 	bic.w	r2, r2, #4
 800207a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800207c:	f7ff ffb6 	bl	8001fec <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002080:	4621      	mov	r1, r4
 8002082:	4802      	ldr	r0, [pc, #8]	; (800208c <z_sched_start+0x38>)
}
 8002084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002088:	f7ff bf30 	b.w	8001eec <z_reschedule>
 800208c:	2000037a 	.word	0x2000037a

08002090 <move_thread_to_end_of_prio_q>:
{
 8002090:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8002092:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8002096:	2b00      	cmp	r3, #0
{
 8002098:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800209a:	da02      	bge.n	80020a2 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 800209c:	4816      	ldr	r0, [pc, #88]	; (80020f8 <move_thread_to_end_of_prio_q+0x68>)
 800209e:	f7ff ff4b 	bl	8001f38 <z_priq_dumb_remove>
	return list->head == list;
 80020a2:	4a16      	ldr	r2, [pc, #88]	; (80020fc <move_thread_to_end_of_prio_q+0x6c>)
 80020a4:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80020a8:	f102 0028 	add.w	r0, r2, #40	; 0x28
 80020ac:	4283      	cmp	r3, r0
 80020ae:	d01c      	beq.n	80020ea <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80020b0:	b1db      	cbz	r3, 80020ea <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
 80020b2:	f991 500e 	ldrsb.w	r5, [r1, #14]
 80020b6:	f993 600e 	ldrsb.w	r6, [r3, #14]
 80020ba:	42ae      	cmp	r6, r5
 80020bc:	dd10      	ble.n	80020e0 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
 80020be:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 80020c0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
 80020c4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80020c6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
 80020c8:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
 80020ca:	6890      	ldr	r0, [r2, #8]
 80020cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020d0:	734b      	strb	r3, [r1, #13]
 80020d2:	1a43      	subs	r3, r0, r1
 80020d4:	4258      	negs	r0, r3
}
 80020d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80020da:	4158      	adcs	r0, r3
 80020dc:	f7ff bf42 	b.w	8001f64 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80020e0:	429c      	cmp	r4, r3
 80020e2:	d002      	beq.n	80020ea <move_thread_to_end_of_prio_q+0x5a>
 80020e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1e5      	bne.n	80020b6 <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
 80020ea:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
 80020ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020f0:	6019      	str	r1, [r3, #0]
	list->tail = node;
 80020f2:	62d1      	str	r1, [r2, #44]	; 0x2c
}
 80020f4:	e7e8      	b.n	80020c8 <move_thread_to_end_of_prio_q+0x38>
 80020f6:	bf00      	nop
 80020f8:	20000360 	.word	0x20000360
 80020fc:	20000338 	.word	0x20000338

08002100 <z_time_slice>:
{
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	4601      	mov	r1, r0
	__asm__ volatile(
 8002104:	f04f 0310 	mov.w	r3, #16
 8002108:	f3ef 8411 	mrs	r4, BASEPRI
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <z_time_slice+0x70>)
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <z_time_slice+0x74>)
 8002118:	6898      	ldr	r0, [r3, #8]
 800211a:	6815      	ldr	r5, [r2, #0]
 800211c:	42a8      	cmp	r0, r5
 800211e:	461d      	mov	r5, r3
 8002120:	d106      	bne.n	8002130 <z_time_slice+0x30>
			z_reset_time_slice();
 8002122:	f7ff fead 	bl	8001e80 <z_reset_time_slice>
	__asm__ volatile(
 8002126:	f384 8811 	msr	BASEPRI, r4
 800212a:	f3bf 8f6f 	isb	sy
}
 800212e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
 8002130:	2600      	movs	r6, #0
 8002132:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8002134:	4a10      	ldr	r2, [pc, #64]	; (8002178 <z_time_slice+0x78>)
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	b1ba      	cbz	r2, 800216a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 800213a:	89c2      	ldrh	r2, [r0, #14]
 800213c:	2a7f      	cmp	r2, #127	; 0x7f
 800213e:	d814      	bhi.n	800216a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8002140:	7b42      	ldrb	r2, [r0, #13]
 8002142:	06d2      	lsls	r2, r2, #27
 8002144:	d111      	bne.n	800216a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8002146:	4a0d      	ldr	r2, [pc, #52]	; (800217c <z_time_slice+0x7c>)
 8002148:	f990 600e 	ldrsb.w	r6, [r0, #14]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	4296      	cmp	r6, r2
 8002150:	db0b      	blt.n	800216a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8002152:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <z_time_slice+0x80>)
 8002154:	4290      	cmp	r0, r2
 8002156:	d008      	beq.n	800216a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	428a      	cmp	r2, r1
 800215c:	dc02      	bgt.n	8002164 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
 800215e:	f7ff ff97 	bl	8002090 <move_thread_to_end_of_prio_q>
 8002162:	e7de      	b.n	8002122 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
 8002164:	1a52      	subs	r2, r2, r1
 8002166:	615a      	str	r2, [r3, #20]
 8002168:	e7dd      	b.n	8002126 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	616b      	str	r3, [r5, #20]
 800216e:	e7da      	b.n	8002126 <z_time_slice+0x26>
 8002170:	20000338 	.word	0x20000338
 8002174:	20000368 	.word	0x20000368
 8002178:	20000370 	.word	0x20000370
 800217c:	2000036c 	.word	0x2000036c
 8002180:	20000110 	.word	0x20000110

08002184 <z_impl_k_thread_suspend>:
{
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8002188:	3018      	adds	r0, #24
 800218a:	f000 ff35 	bl	8002ff8 <z_abort_timeout>
	__asm__ volatile(
 800218e:	f04f 0310 	mov.w	r3, #16
 8002192:	f3ef 8611 	mrs	r6, BASEPRI
 8002196:	f383 8811 	msr	BASEPRI, r3
 800219a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800219e:	f994 300d 	ldrsb.w	r3, [r4, #13]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da07      	bge.n	80021b6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80021a6:	480f      	ldr	r0, [pc, #60]	; (80021e4 <z_impl_k_thread_suspend+0x60>)
 80021a8:	4621      	mov	r1, r4
 80021aa:	f7ff fec5 	bl	8001f38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80021ae:	7b63      	ldrb	r3, [r4, #13]
 80021b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 80021b6:	4d0c      	ldr	r5, [pc, #48]	; (80021e8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80021b8:	7b63      	ldrb	r3, [r4, #13]
 80021ba:	68a8      	ldr	r0, [r5, #8]
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	7363      	strb	r3, [r4, #13]
 80021c2:	1b03      	subs	r3, r0, r4
 80021c4:	4258      	negs	r0, r3
 80021c6:	4158      	adcs	r0, r3
 80021c8:	f7ff fecc 	bl	8001f64 <update_cache>
	__asm__ volatile(
 80021cc:	f386 8811 	msr	BASEPRI, r6
 80021d0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 80021d4:	68ab      	ldr	r3, [r5, #8]
 80021d6:	42a3      	cmp	r3, r4
 80021d8:	d103      	bne.n	80021e2 <z_impl_k_thread_suspend+0x5e>
}
 80021da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 80021de:	f000 bebf 	b.w	8002f60 <z_reschedule_unlocked>
}
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	20000360 	.word	0x20000360
 80021e8:	20000338 	.word	0x20000338

080021ec <z_thread_single_abort>:
{
 80021ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f0:	4604      	mov	r4, r0
	__asm__ volatile(
 80021f2:	f04f 0310 	mov.w	r3, #16
 80021f6:	f3ef 8211 	mrs	r2, BASEPRI
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
 8002202:	7b43      	ldrb	r3, [r0, #13]
 8002204:	f013 0f28 	tst.w	r3, #40	; 0x28
 8002208:	d005      	beq.n	8002216 <z_thread_single_abort+0x2a>
	__asm__ volatile(
 800220a:	f382 8811 	msr	BASEPRI, r2
 800220e:	f3bf 8f6f 	isb	sy
}
 8002212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
 8002216:	f043 0320 	orr.w	r3, r3, #32
 800221a:	7343      	strb	r3, [r0, #13]
 800221c:	f382 8811 	msr	BASEPRI, r2
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	3018      	adds	r0, #24
 8002226:	f000 fee7 	bl	8002ff8 <z_abort_timeout>
	__asm__ volatile(
 800222a:	f04f 0310 	mov.w	r3, #16
 800222e:	f3ef 8611 	mrs	r6, BASEPRI
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800223a:	7b63      	ldrb	r3, [r4, #13]
 800223c:	06d8      	lsls	r0, r3, #27
 800223e:	d116      	bne.n	800226e <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
 8002240:	69a2      	ldr	r2, [r4, #24]
 8002242:	b9a2      	cbnz	r2, 800226e <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
 8002244:	0619      	lsls	r1, r3, #24
 8002246:	d507      	bpl.n	8002258 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
 8002248:	4826      	ldr	r0, [pc, #152]	; (80022e4 <z_thread_single_abort+0xf8>)
 800224a:	4621      	mov	r1, r4
 800224c:	f7ff fe74 	bl	8001f38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8002250:	7b63      	ldrb	r3, [r4, #13]
 8002252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002256:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <z_thread_single_abort+0xfc>)
 800225a:	6898      	ldr	r0, [r3, #8]
 800225c:	1b02      	subs	r2, r0, r4
 800225e:	4250      	negs	r0, r2
 8002260:	4150      	adcs	r0, r2
 8002262:	f7ff fe7f 	bl	8001f64 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002266:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
 800226a:	2700      	movs	r7, #0
 800226c:	e01d      	b.n	80022aa <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
 800226e:	079b      	lsls	r3, r3, #30
 8002270:	d5f9      	bpl.n	8002266 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
 8002272:	68a0      	ldr	r0, [r4, #8]
 8002274:	4621      	mov	r1, r4
 8002276:	f7ff fe5f 	bl	8001f38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800227a:	7b63      	ldrb	r3, [r4, #13]
 800227c:	f023 0302 	bic.w	r3, r3, #2
 8002280:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
 8002282:	2300      	movs	r3, #0
 8002284:	60a3      	str	r3, [r4, #8]
 8002286:	e7ee      	b.n	8002266 <z_thread_single_abort+0x7a>
 8002288:	f105 0018 	add.w	r0, r5, #24
 800228c:	f000 feb4 	bl	8002ff8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 8002290:	68a8      	ldr	r0, [r5, #8]
 8002292:	4629      	mov	r1, r5
 8002294:	f7ff fe50 	bl	8001f38 <z_priq_dumb_remove>
 8002298:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
 800229a:	60af      	str	r7, [r5, #8]
 800229c:	f023 0302 	bic.w	r3, r3, #2
 80022a0:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80022a2:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
 80022a4:	4628      	mov	r0, r5
 80022a6:	f7ff fea1 	bl	8001fec <ready_thread>
	return list->head == list;
 80022aa:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80022ac:	4545      	cmp	r5, r8
 80022ae:	d001      	beq.n	80022b4 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 80022b0:	2d00      	cmp	r5, #0
 80022b2:	d1e9      	bne.n	8002288 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <z_thread_single_abort+0xfc>)
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <z_thread_single_abort+0x100>)
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d102      	bne.n	80022c4 <z_thread_single_abort+0xd8>
			update_cache(1);
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff fe50 	bl	8001f64 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
 80022c4:	7b63      	ldrb	r3, [r4, #13]
 80022c6:	f043 0308 	orr.w	r3, r3, #8
 80022ca:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
 80022cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
 80022ce:	f386 8811 	msr	BASEPRI, r6
 80022d2:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d09b      	beq.n	8002212 <z_thread_single_abort+0x26>
		fn_abort(thread);
 80022da:	4620      	mov	r0, r4
}
 80022dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
 80022e0:	4718      	bx	r3
 80022e2:	bf00      	nop
 80022e4:	20000360 	.word	0x20000360
 80022e8:	20000338 	.word	0x20000338
 80022ec:	20000110 	.word	0x20000110

080022f0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80022f2:	2100      	movs	r1, #0
 80022f4:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
 80022f8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 80022fc:	4608      	mov	r0, r1
 80022fe:	f7ff bdd5 	b.w	8001eac <k_sched_time_slice_set>
 8002302:	bf00      	nop
 8002304:	20000338 	.word	0x20000338

08002308 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002308:	4b01      	ldr	r3, [pc, #4]	; (8002310 <z_impl_k_current_get+0x8>)
 800230a:	6898      	ldr	r0, [r3, #8]
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000338 	.word	0x20000338

08002314 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002314:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
 8002318:	f100 0530 	add.w	r5, r0, #48	; 0x30
 800231c:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
 8002320:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002322:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002324:	2504      	movs	r5, #4
 8002326:	7345      	strb	r5, [r0, #13]
{
 8002328:	460f      	mov	r7, r1

	thread_base->prio = priority;
 800232a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800232c:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800232e:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
 8002330:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
 8002334:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002336:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800233a:	3720      	adds	r7, #32
	node->prev = NULL;
 800233c:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8002340:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
 8002344:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002346:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800234a:	9202      	str	r2, [sp, #8]
 800234c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800234e:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8002350:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002354:	9200      	str	r2, [sp, #0]
 8002356:	4642      	mov	r2, r8
{
 8002358:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800235a:	f7fe ff4f 	bl	80011fc <arch_new_thread>
	if (!_current) {
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <z_setup_new_thread+0x60>)
 8002360:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
 8002362:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
 8002366:	b103      	cbz	r3, 800236a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8002368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 800236a:	6763      	str	r3, [r4, #116]	; 0x74
}
 800236c:	4640      	mov	r0, r8
 800236e:	b004      	add	sp, #16
 8002370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002374:	20000338 	.word	0x20000338

08002378 <z_init_static_threads>:
{
 8002378:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 800237a:	4f22      	ldr	r7, [pc, #136]	; (8002404 <z_init_static_threads+0x8c>)
 800237c:	4d22      	ldr	r5, [pc, #136]	; (8002408 <z_init_static_threads+0x90>)
{
 800237e:	b087      	sub	sp, #28
 8002380:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 8002382:	42bd      	cmp	r5, r7
 8002384:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8002388:	d30b      	bcc.n	80023a2 <z_init_static_threads+0x2a>
	k_sched_lock();
 800238a:	f7ff fdc1 	bl	8001f10 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800238e:	4c1e      	ldr	r4, [pc, #120]	; (8002408 <z_init_static_threads+0x90>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8002390:	4f1e      	ldr	r7, [pc, #120]	; (800240c <z_init_static_threads+0x94>)
		} else {
			return t * (to_hz / from_hz);
 8002392:	250a      	movs	r5, #10
 8002394:	42b4      	cmp	r4, r6
 8002396:	d321      	bcc.n	80023dc <z_init_static_threads+0x64>
}
 8002398:	b007      	add	sp, #28
 800239a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800239e:	f7ff be09 	b.w	8001fb4 <k_sched_unlock>
		z_setup_new_thread(
 80023a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80023a6:	9305      	str	r3, [sp, #20]
 80023a8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80023ac:	9304      	str	r3, [sp, #16]
 80023ae:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80023b2:	9303      	str	r3, [sp, #12]
 80023b4:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80023ca:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80023ce:	f7ff ffa1 	bl	8002314 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80023d2:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80023d6:	65dd      	str	r5, [r3, #92]	; 0x5c
 80023d8:	4625      	mov	r5, r4
 80023da:	e7d2      	b.n	8002382 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80023dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023de:	1c53      	adds	r3, r2, #1
 80023e0:	d009      	beq.n	80023f6 <z_init_static_threads+0x7e>
					    K_MSEC(thread_data->init_delay));
 80023e2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80023e6:	fb82 2305 	smull	r2, r3, r2, r5
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80023ea:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 80023ee:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80023f0:	d103      	bne.n	80023fa <z_init_static_threads+0x82>
	z_sched_start(thread);
 80023f2:	f7ff fe2f 	bl	8002054 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80023f6:	3430      	adds	r4, #48	; 0x30
 80023f8:	e7cc      	b.n	8002394 <z_init_static_threads+0x1c>
 80023fa:	4639      	mov	r1, r7
 80023fc:	3018      	adds	r0, #24
 80023fe:	f000 f891 	bl	8002524 <z_add_timeout>
 8002402:	e7f8      	b.n	80023f6 <z_init_static_threads+0x7e>
 8002404:	2000010c 	.word	0x2000010c
 8002408:	2000010c 	.word	0x2000010c
 800240c:	08002fb9 	.word	0x08002fb9

08002410 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
 8002410:	b508      	push	{r3, lr}
	__asm__ volatile(
 8002412:	f04f 0310 	mov.w	r3, #16
 8002416:	f3ef 8411 	mrs	r4, BASEPRI
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
 8002422:	4b04      	ldr	r3, [pc, #16]	; (8002434 <z_self_abort+0x24>)
 8002424:	6898      	ldr	r0, [r3, #8]
 8002426:	6118      	str	r0, [r3, #16]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 8002428:	f7ff feac 	bl	8002184 <z_impl_k_thread_suspend>
 800242c:	4620      	mov	r0, r4
 800242e:	f7fe fe69 	bl	8001104 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
 8002432:	bf00      	nop
 8002434:	20000338 	.word	0x20000338

08002438 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8002438:	4a02      	ldr	r2, [pc, #8]	; (8002444 <boot_banner+0xc>)
 800243a:	4903      	ldr	r1, [pc, #12]	; (8002448 <boot_banner+0x10>)
 800243c:	4803      	ldr	r0, [pc, #12]	; (800244c <boot_banner+0x14>)
 800243e:	f000 b97b 	b.w	8002738 <printk>
 8002442:	bf00      	nop
 8002444:	08003698 	.word	0x08003698
 8002448:	08003651 	.word	0x08003651
 800244c:	08003672 	.word	0x08003672

08002450 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8002450:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <z_data_copy+0x20>)
 8002456:	4907      	ldr	r1, [pc, #28]	; (8002474 <z_data_copy+0x24>)
 8002458:	1a12      	subs	r2, r2, r0
 800245a:	f000 fb41 	bl	8002ae0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800245e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <z_data_copy+0x28>)
 8002464:	4905      	ldr	r1, [pc, #20]	; (800247c <z_data_copy+0x2c>)
 8002466:	4806      	ldr	r0, [pc, #24]	; (8002480 <z_data_copy+0x30>)
 8002468:	f000 bb3a 	b.w	8002ae0 <memcpy>
 800246c:	20000000 	.word	0x20000000
 8002470:	2000010c 	.word	0x2000010c
 8002474:	0800369c 	.word	0x0800369c
 8002478:	00000000 	.word	0x00000000
 800247c:	0800369c 	.word	0x0800369c
 8002480:	20000000 	.word	0x20000000

08002484 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <elapsed+0x10>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	b90b      	cbnz	r3, 800248e <elapsed+0xa>
 800248a:	f7fe be1d 	b.w	80010c8 <z_clock_elapsed>
}
 800248e:	2000      	movs	r0, #0
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000374 	.word	0x20000374

08002498 <remove_timeout>:
{
 8002498:	b530      	push	{r4, r5, lr}
 800249a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800249c:	b168      	cbz	r0, 80024ba <remove_timeout+0x22>
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
 80024a0:	6852      	ldr	r2, [r2, #4]
 80024a2:	4290      	cmp	r0, r2
 80024a4:	d009      	beq.n	80024ba <remove_timeout+0x22>
	if (next(t) != NULL) {
 80024a6:	b143      	cbz	r3, 80024ba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80024a8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80024ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80024b0:	1912      	adds	r2, r2, r4
 80024b2:	eb45 0101 	adc.w	r1, r5, r1
 80024b6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
 80024ba:	6842      	ldr	r2, [r0, #4]
 80024bc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80024be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80024c0:	2300      	movs	r3, #0
	node->prev = NULL;
 80024c2:	e9c0 3300 	strd	r3, r3, [r0]
}
 80024c6:	bd30      	pop	{r4, r5, pc}
 80024c8:	20000030 	.word	0x20000030

080024cc <next_timeout>:

static int32_t next_timeout(void)
{
 80024cc:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <next_timeout+0x50>)
 80024d0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80024d2:	429c      	cmp	r4, r3
 80024d4:	bf08      	it	eq
 80024d6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80024d8:	f7ff ffd4 	bl	8002484 <elapsed>
 80024dc:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
 80024de:	b1bc      	cbz	r4, 8002510 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80024e0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80024e4:	1b40      	subs	r0, r0, r5
 80024e6:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 80024ea:	2801      	cmp	r0, #1
 80024ec:	f171 0300 	sbcs.w	r3, r1, #0
 80024f0:	db11      	blt.n	8002516 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80024f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80024f6:	2300      	movs	r3, #0
 80024f8:	4282      	cmp	r2, r0
 80024fa:	eb73 0401 	sbcs.w	r4, r3, r1
 80024fe:	da00      	bge.n	8002502 <next_timeout+0x36>
 8002500:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <next_timeout+0x54>)
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	b113      	cbz	r3, 800250e <next_timeout+0x42>
 8002508:	4298      	cmp	r0, r3
 800250a:	bfa8      	it	ge
 800250c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800250e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8002510:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002514:	e7f5      	b.n	8002502 <next_timeout+0x36>
 8002516:	2000      	movs	r0, #0
 8002518:	e7f3      	b.n	8002502 <next_timeout+0x36>
 800251a:	bf00      	nop
 800251c:	20000030 	.word	0x20000030
 8002520:	20000338 	.word	0x20000338

08002524 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 8002524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002528:	9101      	str	r1, [sp, #4]
 800252a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800252c:	1c4b      	adds	r3, r1, #1
 800252e:	bf08      	it	eq
 8002530:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8002534:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002536:	d06c      	beq.n	8002612 <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
 8002538:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 800253a:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
 800253e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8002542:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002546:	ebb3 0804 	subs.w	r8, r3, r4
 800254a:	eb6b 0905 	sbc.w	r9, fp, r5
 800254e:	f1b8 0f00 	cmp.w	r8, #0
 8002552:	f179 0300 	sbcs.w	r3, r9, #0
 8002556:	db0f      	blt.n	8002578 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 8002558:	f7ff ff94 	bl	8002484 <elapsed>
 800255c:	4a33      	ldr	r2, [pc, #204]	; (800262c <z_add_timeout+0x108>)
 800255e:	e9d2 1c00 	ldrd	r1, ip, [r2]
 8002562:	f06f 0301 	mvn.w	r3, #1
 8002566:	1a5b      	subs	r3, r3, r1
 8002568:	eb6b 020c 	sbc.w	r2, fp, ip
 800256c:	1b1e      	subs	r6, r3, r4
 800256e:	eb62 0705 	sbc.w	r7, r2, r5
 8002572:	1a34      	subs	r4, r6, r0
 8002574:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002578:	9b01      	ldr	r3, [sp, #4]
 800257a:	f8ca 3008 	str.w	r3, [sl, #8]
 800257e:	f04f 0310 	mov.w	r3, #16
 8002582:	f3ef 8611 	mrs	r6, BASEPRI
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 800258e:	f7ff ff79 	bl	8002484 <elapsed>
	ticks = MAX(1, ticks);
 8002592:	2c01      	cmp	r4, #1
 8002594:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <z_add_timeout+0x10c>)
 800259a:	bfb8      	it	lt
 800259c:	2401      	movlt	r4, #1
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	bfb8      	it	lt
 80025a2:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
 80025a4:	1824      	adds	r4, r4, r0
 80025a6:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80025aa:	429a      	cmp	r2, r3
 80025ac:	e9ca 4504 	strd	r4, r5, [sl, #16]
 80025b0:	d001      	beq.n	80025b6 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80025b2:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 80025b4:	b952      	cbnz	r2, 80025cc <z_add_timeout+0xa8>
	node->prev = list->tail;
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
 80025bc:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 80025be:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
 80025c2:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
 80025c6:	f8c3 a004 	str.w	sl, [r3, #4]
}
 80025ca:	e014      	b.n	80025f6 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
 80025cc:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
 80025d0:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 80025d4:	4544      	cmp	r4, r8
 80025d6:	eb75 0109 	sbcs.w	r1, r5, r9
 80025da:	da1d      	bge.n	8002618 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
 80025dc:	ebb8 0004 	subs.w	r0, r8, r4
 80025e0:	eb69 0105 	sbc.w	r1, r9, r5
 80025e4:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
 80025e8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80025ea:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
 80025ee:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
 80025f2:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
 80025f6:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d006      	beq.n	800260a <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80025fc:	4592      	cmp	sl, r2
 80025fe:	d104      	bne.n	800260a <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
 8002600:	f7ff ff64 	bl	80024cc <next_timeout>
 8002604:	2100      	movs	r1, #0
 8002606:	f7fe fcfb 	bl	8001000 <z_clock_set_timeout>
	__asm__ volatile(
 800260a:	f386 8811 	msr	BASEPRI, r6
 800260e:	f3bf 8f6f 	isb	sy
		}
	}
}
 8002612:	b003      	add	sp, #12
 8002614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
 8002618:	ebb4 0008 	subs.w	r0, r4, r8
 800261c:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
 8002620:	42ba      	cmp	r2, r7
 8002622:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8002626:	d0c6      	beq.n	80025b6 <z_add_timeout+0x92>
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	e7c3      	b.n	80025b4 <z_add_timeout+0x90>
 800262c:	20000210 	.word	0x20000210
 8002630:	20000030 	.word	0x20000030

08002634 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
 8002634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002638:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800263a:	f7ff fd61 	bl	8002100 <z_time_slice>
	__asm__ volatile(
 800263e:	f04f 0310 	mov.w	r3, #16
 8002642:	f3ef 8411 	mrs	r4, BASEPRI
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800264e:	4d2c      	ldr	r5, [pc, #176]	; (8002700 <z_clock_announce+0xcc>)
 8002650:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8002704 <z_clock_announce+0xd0>
	return list->head == list;
 8002654:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8002708 <z_clock_announce+0xd4>
 8002658:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800265a:	4651      	mov	r1, sl
 800265c:	f8d5 c000 	ldr.w	ip, [r5]
 8002660:	f8db 0000 	ldr.w	r0, [fp]
 8002664:	4662      	mov	r2, ip
 8002666:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002668:	4558      	cmp	r0, fp
 800266a:	e9da 8900 	ldrd	r8, r9, [sl]
 800266e:	e9cd 2300 	strd	r2, r3, [sp]
 8002672:	d00d      	beq.n	8002690 <z_clock_announce+0x5c>
 8002674:	b160      	cbz	r0, 8002690 <z_clock_announce+0x5c>
 8002676:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 800267a:	45b4      	cmp	ip, r6
 800267c:	41bb      	sbcs	r3, r7
 800267e:	da1e      	bge.n	80026be <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8002680:	9b00      	ldr	r3, [sp, #0]
 8002682:	ebb6 0c03 	subs.w	ip, r6, r3
 8002686:	9b01      	ldr	r3, [sp, #4]
 8002688:	eb67 0603 	sbc.w	r6, r7, r3
 800268c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
 8002690:	9b00      	ldr	r3, [sp, #0]
 8002692:	eb13 0208 	adds.w	r2, r3, r8
 8002696:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
 8002698:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
 800269c:	eb43 0309 	adc.w	r3, r3, r9
 80026a0:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
 80026a4:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
 80026a6:	f7ff ff11 	bl	80024cc <next_timeout>
 80026aa:	4631      	mov	r1, r6
 80026ac:	f7fe fca8 	bl	8001000 <z_clock_set_timeout>
	__asm__ volatile(
 80026b0:	f384 8811 	msr	BASEPRI, r4
 80026b4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80026b8:	b003      	add	sp, #12
 80026ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
 80026be:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
 80026ca:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
 80026ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
 80026d2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
 80026d6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
 80026da:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
 80026dc:	f7ff fedc 	bl	8002498 <remove_timeout>
 80026e0:	f384 8811 	msr	BASEPRI, r4
 80026e4:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80026e8:	6883      	ldr	r3, [r0, #8]
 80026ea:	4798      	blx	r3
	__asm__ volatile(
 80026ec:	f04f 0310 	mov.w	r3, #16
 80026f0:	f3ef 8411 	mrs	r4, BASEPRI
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
 80026fc:	4901      	ldr	r1, [pc, #4]	; (8002704 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80026fe:	e7ad      	b.n	800265c <z_clock_announce+0x28>
 8002700:	20000374 	.word	0x20000374
 8002704:	20000210 	.word	0x20000210
 8002708:	20000030 	.word	0x20000030

0800270c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
 800270c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 800270e:	4c06      	ldr	r4, [pc, #24]	; (8002728 <statics_init+0x1c>)
 8002710:	4d06      	ldr	r5, [pc, #24]	; (800272c <statics_init+0x20>)
 8002712:	42ac      	cmp	r4, r5
 8002714:	d301      	bcc.n	800271a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 8002716:	2000      	movs	r0, #0
 8002718:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800271a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800271e:	4620      	mov	r0, r4
 8002720:	f000 fcd4 	bl	80030cc <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8002724:	3414      	adds	r4, #20
 8002726:	e7f4      	b.n	8002712 <statics_init+0x6>
 8002728:	2000010c 	.word	0x2000010c
 800272c:	2000010c 	.word	0x2000010c

08002730 <main>:
#else
	iw_init_service();
#endif /* IW_OS */

	return 0;
}
 8002730:	2000      	movs	r0, #0
 8002732:	4770      	bx	lr

08002734 <arch_printk_char_out>:
}
 8002734:	2000      	movs	r0, #0
 8002736:	4770      	bx	lr

08002738 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
 8002738:	b40f      	push	{r0, r1, r2, r3}
 800273a:	b507      	push	{r0, r1, r2, lr}
 800273c:	a904      	add	r1, sp, #16
 800273e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8002742:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 8002744:	f7fd feaa 	bl	800049c <vprintk>
	}
	va_end(ap);
}
 8002748:	b003      	add	sp, #12
 800274a:	f85d eb04 	ldr.w	lr, [sp], #4
 800274e:	b004      	add	sp, #16
 8002750:	4770      	bx	lr

08002752 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002752:	4604      	mov	r4, r0
 8002754:	b508      	push	{r3, lr}
 8002756:	4608      	mov	r0, r1
 8002758:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 800275a:	461a      	mov	r2, r3
 800275c:	47a0      	blx	r4
	return z_impl_k_current_get();
 800275e:	f7ff fdd3 	bl	8002308 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8002762:	f7fe ff03 	bl	800156c <z_impl_k_thread_abort>

08002766 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8002766:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8002768:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 8002770:	bf2c      	ite	cs
 8002772:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 8002776:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 800277a:	4770      	bx	lr

0800277c <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800277c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 8002780:	6880      	ldr	r0, [r0, #8]
 8002782:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 8002786:	bf2c      	ite	cs
 8002788:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800278c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 8002790:	4770      	bx	lr

08002792 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
 8002792:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8002794:	2201      	movs	r2, #1
 8002796:	f7ff ffe6 	bl	8002766 <chunk_field>
}
 800279a:	0840      	lsrs	r0, r0, #1
 800279c:	bd08      	pop	{r3, pc}

0800279e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 800279e:	6883      	ldr	r3, [r0, #8]
 80027a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 80027a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80027a8:	d308      	bcc.n	80027bc <set_chunk_used+0x1e>
		if (used) {
 80027aa:	684b      	ldr	r3, [r1, #4]
 80027ac:	b11a      	cbz	r2, 80027b6 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80027ae:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	4770      	bx	lr
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	e7fa      	b.n	80027b2 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
 80027bc:	884b      	ldrh	r3, [r1, #2]
 80027be:	b11a      	cbz	r2, 80027c8 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80027c0:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80027c4:	804b      	strh	r3, [r1, #2]
		}
	}
}
 80027c6:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	e7fa      	b.n	80027c4 <set_chunk_used+0x26>

080027ce <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80027ce:	0053      	lsls	r3, r2, #1
 80027d0:	2201      	movs	r2, #1
 80027d2:	f7ff bfd3 	b.w	800277c <chunk_set>

080027d6 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 80027d6:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80027d8:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80027da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80027de:	bf2c      	ite	cs
 80027e0:	2002      	movcs	r0, #2
 80027e2:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80027e4:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
 80027e6:	fab0 f080 	clz	r0, r0
}
 80027ea:	f1c0 001f 	rsb	r0, r0, #31
 80027ee:	4770      	bx	lr

080027f0 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 80027f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f4:	4604      	mov	r4, r0
 80027f6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
 80027f8:	f7ff ffcb 	bl	8002792 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
 80027fc:	68a3      	ldr	r3, [r4, #8]
 80027fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002802:	4601      	mov	r1, r0
 8002804:	d301      	bcc.n	800280a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 8002806:	2801      	cmp	r0, #1
 8002808:	d035      	beq.n	8002876 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff ffe3 	bl	80027d6 <bucket_idx>
	if (b->next == 0U) {
 8002810:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8002814:	6916      	ldr	r6, [r2, #16]
 8002816:	b99e      	cbnz	r6, 8002840 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 8002818:	2301      	movs	r3, #1
 800281a:	fa03 f000 	lsl.w	r0, r3, r0
 800281e:	68e3      	ldr	r3, [r4, #12]
 8002820:	4303      	orrs	r3, r0
 8002822:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 8002824:	4629      	mov	r1, r5
		b->next = c;
 8002826:	6115      	str	r5, [r2, #16]
 8002828:	462b      	mov	r3, r5
 800282a:	2202      	movs	r2, #2
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff ffa5 	bl	800277c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8002832:	2203      	movs	r2, #3
 8002834:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 8002836:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
 8002838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800283c:	f7ff bf9e 	b.w	800277c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 8002840:	2202      	movs	r2, #2
 8002842:	4631      	mov	r1, r6
 8002844:	4620      	mov	r0, r4
 8002846:	f7ff ff8e 	bl	8002766 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 800284a:	2202      	movs	r2, #2
 800284c:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 800284e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8002850:	4629      	mov	r1, r5
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff ff92 	bl	800277c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8002858:	4633      	mov	r3, r6
 800285a:	2203      	movs	r2, #3
 800285c:	4629      	mov	r1, r5
 800285e:	4620      	mov	r0, r4
 8002860:	f7ff ff8c 	bl	800277c <chunk_set>
 8002864:	2203      	movs	r2, #3
 8002866:	4639      	mov	r1, r7
 8002868:	462b      	mov	r3, r5
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff ff86 	bl	800277c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8002870:	2202      	movs	r2, #2
 8002872:	4631      	mov	r1, r6
 8002874:	e7df      	b.n	8002836 <free_list_add+0x46>
 8002876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800287a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 800287a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800287e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002880:	bf2c      	ite	cs
 8002882:	2508      	movcs	r5, #8
 8002884:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8002886:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8002888:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800288a:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800288c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8002890:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
 8002894:	2200      	movs	r2, #0
 8002896:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 8002898:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
 800289a:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 800289c:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
 800289e:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
 80028a2:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 80028a4:	4629      	mov	r1, r5
	h->len = buf_sz;
 80028a6:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
 80028a8:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 80028aa:	4620      	mov	r0, r4
 80028ac:	f7ff ff93 	bl	80027d6 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
 80028b0:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80028b2:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 80028b4:	1c41      	adds	r1, r0, #1
 80028b6:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 80028b8:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
 80028bc:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 80028be:	428b      	cmp	r3, r1
 80028c0:	db29      	blt.n	8002916 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 80028c2:	4632      	mov	r2, r6
 80028c4:	4620      	mov	r0, r4
 80028c6:	2100      	movs	r1, #0
 80028c8:	f7ff ff81 	bl	80027ce <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 80028cc:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
 80028ce:	4620      	mov	r0, r4
 80028d0:	2201      	movs	r2, #1
 80028d2:	2100      	movs	r1, #0
 80028d4:	f7ff ff63 	bl	800279e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 80028d8:	463a      	mov	r2, r7
 80028da:	4631      	mov	r1, r6
 80028dc:	f7ff ff77 	bl	80027ce <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80028e0:	4633      	mov	r3, r6
 80028e2:	4631      	mov	r1, r6
 80028e4:	4620      	mov	r0, r4
 80028e6:	2200      	movs	r2, #0
 80028e8:	f7ff ff48 	bl	800277c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
 80028ec:	4629      	mov	r1, r5
 80028ee:	4620      	mov	r0, r4
 80028f0:	2200      	movs	r2, #0
 80028f2:	f7ff ff6c 	bl	80027ce <set_chunk_size>
 80028f6:	463b      	mov	r3, r7
 80028f8:	4629      	mov	r1, r5
 80028fa:	4620      	mov	r0, r4
 80028fc:	2200      	movs	r2, #0
 80028fe:	f7ff ff3d 	bl	800277c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
 8002902:	4629      	mov	r1, r5
 8002904:	4620      	mov	r0, r4
 8002906:	2201      	movs	r2, #1
 8002908:	f7ff ff49 	bl	800279e <set_chunk_used>

	free_list_add(h, chunk0_size);
 800290c:	4631      	mov	r1, r6
}
 800290e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 8002912:	f7ff bf6d 	b.w	80027f0 <free_list_add>
		h->buckets[i].next = 0;
 8002916:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 800291a:	3301      	adds	r3, #1
 800291c:	e7cf      	b.n	80028be <sys_heap_init+0x44>

0800291e <encode_uint>:
{
 800291e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002922:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
 8002924:	78d3      	ldrb	r3, [r2, #3]
{
 8002926:	4614      	mov	r4, r2
	switch (specifier) {
 8002928:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 800292a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
 800292e:	4606      	mov	r6, r0
 8002930:	460f      	mov	r7, r1
 8002932:	9201      	str	r2, [sp, #4]
	switch (specifier) {
 8002934:	d02d      	beq.n	8002992 <encode_uint+0x74>
 8002936:	d828      	bhi.n	800298a <encode_uint+0x6c>
		return 16;
 8002938:	2b58      	cmp	r3, #88	; 0x58
 800293a:	bf14      	ite	ne
 800293c:	250a      	movne	r5, #10
 800293e:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
 8002940:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
 8002944:	46aa      	mov	sl, r5
 8002946:	f04f 0b00 	mov.w	fp, #0
 800294a:	4652      	mov	r2, sl
 800294c:	465b      	mov	r3, fp
 800294e:	4630      	mov	r0, r6
 8002950:	4639      	mov	r1, r7
 8002952:	f7fd fc19 	bl	8000188 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002956:	2a09      	cmp	r2, #9
 8002958:	b2d3      	uxtb	r3, r2
 800295a:	d81f      	bhi.n	800299c <encode_uint+0x7e>
 800295c:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 800295e:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002960:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
 8002962:	bf08      	it	eq
 8002964:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002966:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
 800296a:	d301      	bcc.n	8002970 <encode_uint+0x52>
 800296c:	45c8      	cmp	r8, r9
 800296e:	d812      	bhi.n	8002996 <encode_uint+0x78>
	if (conv->flag_hash) {
 8002970:	7823      	ldrb	r3, [r4, #0]
 8002972:	069b      	lsls	r3, r3, #26
 8002974:	d505      	bpl.n	8002982 <encode_uint+0x64>
		if (radix == 8) {
 8002976:	2d08      	cmp	r5, #8
 8002978:	d116      	bne.n	80029a8 <encode_uint+0x8a>
			conv->altform_0 = true;
 800297a:	78a3      	ldrb	r3, [r4, #2]
 800297c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8002980:	70a3      	strb	r3, [r4, #2]
}
 8002982:	4640      	mov	r0, r8
 8002984:	b003      	add	sp, #12
 8002986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 800298a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 800298e:	2b70      	cmp	r3, #112	; 0x70
 8002990:	e7d3      	b.n	800293a <encode_uint+0x1c>
	switch (specifier) {
 8002992:	2508      	movs	r5, #8
 8002994:	e7d4      	b.n	8002940 <encode_uint+0x22>
		value /= radix;
 8002996:	4606      	mov	r6, r0
 8002998:	460f      	mov	r7, r1
 800299a:	e7d6      	b.n	800294a <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800299c:	9a01      	ldr	r2, [sp, #4]
 800299e:	2a19      	cmp	r2, #25
 80029a0:	bf94      	ite	ls
 80029a2:	3337      	addls	r3, #55	; 0x37
 80029a4:	3357      	addhi	r3, #87	; 0x57
 80029a6:	e7da      	b.n	800295e <encode_uint+0x40>
		} else if (radix == 16) {
 80029a8:	2d10      	cmp	r5, #16
 80029aa:	d1ea      	bne.n	8002982 <encode_uint+0x64>
			conv->altform_0c = true;
 80029ac:	78a3      	ldrb	r3, [r4, #2]
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	e7e5      	b.n	8002980 <encode_uint+0x62>

080029b4 <outs>:
{
 80029b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029b8:	4607      	mov	r7, r0
 80029ba:	4688      	mov	r8, r1
 80029bc:	4615      	mov	r5, r2
 80029be:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80029c0:	4614      	mov	r4, r2
 80029c2:	42b4      	cmp	r4, r6
 80029c4:	eba4 0005 	sub.w	r0, r4, r5
 80029c8:	d302      	bcc.n	80029d0 <outs+0x1c>
 80029ca:	b93e      	cbnz	r6, 80029dc <outs+0x28>
 80029cc:	7823      	ldrb	r3, [r4, #0]
 80029ce:	b12b      	cbz	r3, 80029dc <outs+0x28>
		int rc = out((int)*sp++, ctx);
 80029d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80029d4:	4641      	mov	r1, r8
 80029d6:	47b8      	blx	r7
		if (rc < 0) {
 80029d8:	2800      	cmp	r0, #0
 80029da:	daf2      	bge.n	80029c2 <outs+0xe>
}
 80029dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029e0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80029e0:	4770      	bx	lr

080029e2 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 80029e2:	68c2      	ldr	r2, [r0, #12]
 80029e4:	2101      	movs	r1, #1
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe b90c 	b.w	8000c04 <__stm32_exti_isr.isra.0>

080029ec <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 80029ec:	68c2      	ldr	r2, [r0, #12]
 80029ee:	2102      	movs	r1, #2
 80029f0:	2001      	movs	r0, #1
 80029f2:	f7fe b907 	b.w	8000c04 <__stm32_exti_isr.isra.0>

080029f6 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 80029f6:	68c2      	ldr	r2, [r0, #12]
 80029f8:	2103      	movs	r1, #3
 80029fa:	2002      	movs	r0, #2
 80029fc:	f7fe b902 	b.w	8000c04 <__stm32_exti_isr.isra.0>

08002a00 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8002a00:	68c2      	ldr	r2, [r0, #12]
 8002a02:	2104      	movs	r1, #4
 8002a04:	2003      	movs	r0, #3
 8002a06:	f7fe b8fd 	b.w	8000c04 <__stm32_exti_isr.isra.0>

08002a0a <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8002a0a:	68c2      	ldr	r2, [r0, #12]
 8002a0c:	2105      	movs	r1, #5
 8002a0e:	2004      	movs	r0, #4
 8002a10:	f7fe b8f8 	b.w	8000c04 <__stm32_exti_isr.isra.0>

08002a14 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8002a14:	68c2      	ldr	r2, [r0, #12]
 8002a16:	210a      	movs	r1, #10
 8002a18:	2005      	movs	r0, #5
 8002a1a:	f7fe b8f3 	b.w	8000c04 <__stm32_exti_isr.isra.0>

08002a1e <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8002a1e:	68c2      	ldr	r2, [r0, #12]
 8002a20:	2110      	movs	r1, #16
 8002a22:	200a      	movs	r0, #10
 8002a24:	f7fe b8ee 	b.w	8000c04 <__stm32_exti_isr.isra.0>

08002a28 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8002a28:	2200      	movs	r2, #0
{
 8002a2a:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	2006      	movs	r0, #6
 8002a30:	f7fe fbcc 	bl	80011cc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002a34:	2200      	movs	r2, #0
 8002a36:	4611      	mov	r1, r2
 8002a38:	2007      	movs	r0, #7
 8002a3a:	f7fe fbc7 	bl	80011cc <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4611      	mov	r1, r2
 8002a42:	2008      	movs	r0, #8
 8002a44:	f7fe fbc2 	bl	80011cc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	2009      	movs	r0, #9
 8002a4e:	f7fe fbbd 	bl	80011cc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002a52:	2200      	movs	r2, #0
 8002a54:	4611      	mov	r1, r2
 8002a56:	200a      	movs	r0, #10
 8002a58:	f7fe fbb8 	bl	80011cc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4611      	mov	r1, r2
 8002a60:	2017      	movs	r0, #23
 8002a62:	f7fe fbb3 	bl	80011cc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002a66:	2200      	movs	r2, #0
 8002a68:	4611      	mov	r1, r2
 8002a6a:	2028      	movs	r0, #40	; 0x28
 8002a6c:	f7fe fbae 	bl	80011cc <z_arm_irq_priority_set>
}
 8002a70:	2000      	movs	r0, #0
 8002a72:	bd08      	pop	{r3, pc}

08002a74 <config_pll_init>:
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(CONFIG_CLOCK_STM32_PLL_M_DIVISOR);
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8002a74:	2314      	movs	r3, #20
 8002a76:	2200      	movs	r2, #0
 8002a78:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLR = pllr(CONFIG_CLOCK_STM32_PLL_R_DIVISOR);
 8002a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a80:	6083      	str	r3, [r0, #8]
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 8002a82:	4770      	bx	lr

08002a84 <config_enable_default_clocks>:
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8002a84:	4770      	bx	lr

08002a86 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002a86:	2100      	movs	r1, #0
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f000 b800 	b.w	8002a8e <z_arm_fatal_error>

08002a8e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002a8e:	f000 ba40 	b.w	8002f12 <z_fatal_error>

08002a92 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8002a92:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002a94:	6800      	ldr	r0, [r0, #0]
 8002a96:	f000 ba3c 	b.w	8002f12 <z_fatal_error>

08002a9a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8002a9a:	b508      	push	{r3, lr}
	handler();
 8002a9c:	f7fe fc12 	bl	80012c4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002aa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002aa4:	f7fe bd48 	b.w	8001538 <z_arm_exc_exit>

08002aa8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002aa8:	4603      	mov	r3, r0
	size_t n = 0;
 8002aaa:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002aac:	5c1a      	ldrb	r2, [r3, r0]
 8002aae:	b902      	cbnz	r2, 8002ab2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002ab0:	4770      	bx	lr
		n++;
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	e7fa      	b.n	8002aac <strlen+0x4>

08002ab6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8002ab6:	4603      	mov	r3, r0
	size_t n = 0;
 8002ab8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002aba:	5c1a      	ldrb	r2, [r3, r0]
 8002abc:	b10a      	cbz	r2, 8002ac2 <strnlen+0xc>
 8002abe:	4288      	cmp	r0, r1
 8002ac0:	d100      	bne.n	8002ac4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8002ac2:	4770      	bx	lr
		n++;
 8002ac4:	3001      	adds	r0, #1
 8002ac6:	e7f8      	b.n	8002aba <strnlen+0x4>

08002ac8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8002ac8:	1e43      	subs	r3, r0, #1
 8002aca:	3901      	subs	r1, #1
 8002acc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002ad0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002ad4:	4282      	cmp	r2, r0
 8002ad6:	d101      	bne.n	8002adc <strcmp+0x14>
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d1f7      	bne.n	8002acc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8002adc:	1a10      	subs	r0, r2, r0
 8002ade:	4770      	bx	lr

08002ae0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8002ae0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8002ae2:	ea81 0400 	eor.w	r4, r1, r0
 8002ae6:	07a5      	lsls	r5, r4, #30
 8002ae8:	4603      	mov	r3, r0
 8002aea:	d00b      	beq.n	8002b04 <memcpy+0x24>
 8002aec:	3b01      	subs	r3, #1
 8002aee:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002af0:	4291      	cmp	r1, r2
 8002af2:	d11b      	bne.n	8002b2c <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 8002af6:	2a00      	cmp	r2, #0
 8002af8:	d0fc      	beq.n	8002af4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 8002afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002afe:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8002b02:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 8002b04:	079c      	lsls	r4, r3, #30
 8002b06:	d1f6      	bne.n	8002af6 <memcpy+0x16>
 8002b08:	f022 0403 	bic.w	r4, r2, #3
 8002b0c:	1f1d      	subs	r5, r3, #4
 8002b0e:	0896      	lsrs	r6, r2, #2
 8002b10:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8002b12:	42b9      	cmp	r1, r7
 8002b14:	d105      	bne.n	8002b22 <memcpy+0x42>
 8002b16:	f06f 0503 	mvn.w	r5, #3
 8002b1a:	fb05 2206 	mla	r2, r5, r6, r2
 8002b1e:	4423      	add	r3, r4
 8002b20:	e7e4      	b.n	8002aec <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8002b22:	f851 cb04 	ldr.w	ip, [r1], #4
 8002b26:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
 8002b2a:	e7f2      	b.n	8002b12 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
 8002b2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b30:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002b34:	e7dc      	b.n	8002af0 <memcpy+0x10>

08002b36 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 8002b36:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002b38:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8002b3a:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8002b3c:	079c      	lsls	r4, r3, #30
 8002b3e:	d111      	bne.n	8002b64 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 8002b40:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 8002b44:	f022 0603 	bic.w	r6, r2, #3
 8002b48:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8002b4c:	441e      	add	r6, r3
 8002b4e:	0894      	lsrs	r4, r2, #2
 8002b50:	42b3      	cmp	r3, r6
 8002b52:	d10d      	bne.n	8002b70 <memset+0x3a>
 8002b54:	f06f 0503 	mvn.w	r5, #3
 8002b58:	fb05 2204 	mla	r2, r5, r4, r2
 8002b5c:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d109      	bne.n	8002b76 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	d0fc      	beq.n	8002b62 <memset+0x2c>
		*(d_byte++) = c_byte;
 8002b68:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	e7e5      	b.n	8002b3c <memset+0x6>
		*(d_word++) = c_word;
 8002b70:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 8002b74:	e7ec      	b.n	8002b50 <memset+0x1a>
		*(d_byte++) = c_byte;
 8002b76:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002b7a:	e7f0      	b.n	8002b5e <memset+0x28>

08002b7c <_stdout_hook_default>:
}
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b80:	4770      	bx	lr

08002b82 <gpio_stm32_isr>:
{
 8002b82:	460b      	mov	r3, r1
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002b84:	6889      	ldr	r1, [r1, #8]
 8002b86:	b570      	push	{r4, r5, r6, lr}
 8002b88:	b169      	cbz	r1, 8002ba6 <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8002b8a:	2501      	movs	r5, #1
 8002b8c:	685e      	ldr	r6, [r3, #4]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8002b8e:	680c      	ldr	r4, [r1, #0]
 8002b90:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8002b92:	688a      	ldr	r2, [r1, #8]
 8002b94:	402a      	ands	r2, r5
 8002b96:	d002      	beq.n	8002b9e <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002b98:	684b      	ldr	r3, [r1, #4]
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002b9e:	b114      	cbz	r4, 8002ba6 <gpio_stm32_isr+0x24>
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	6824      	ldr	r4, [r4, #0]
 8002ba4:	e7f5      	b.n	8002b92 <gpio_stm32_isr+0x10>
}
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}

08002ba8 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002ba8:	6843      	ldr	r3, [r0, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002bac:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002bae:	600b      	str	r3, [r1, #0]
}
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	4770      	bx	lr

08002bb4 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bb4:	6843      	ldr	r3, [r0, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002bb8:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002bba:	4042      	eors	r2, r0
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002bc0:	615a      	str	r2, [r3, #20]
}
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	4770      	bx	lr

08002bc6 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bc6:	6843      	ldr	r3, [r0, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
}
 8002bca:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002bcc:	6199      	str	r1, [r3, #24]
}
 8002bce:	4770      	bx	lr

08002bd0 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bd0:	6843      	ldr	r3, [r0, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
}
 8002bd4:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002bd6:	6299      	str	r1, [r3, #40]	; 0x28
 8002bd8:	4770      	bx	lr

08002bda <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bda:	6843      	ldr	r3, [r0, #4]
 8002bdc:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002bde:	6953      	ldr	r3, [r2, #20]
 8002be0:	404b      	eors	r3, r1
 8002be2:	6153      	str	r3, [r2, #20]
}
 8002be4:	2000      	movs	r0, #0
 8002be6:	4770      	bx	lr

08002be8 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 8002be8:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
 8002bea:	6898      	ldr	r0, [r3, #8]
{
 8002bec:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8002bee:	b158      	cbz	r0, 8002c08 <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002bf0:	2400      	movs	r4, #0
 8002bf2:	4281      	cmp	r1, r0
 8002bf4:	d113      	bne.n	8002c1e <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8002bf6:	6808      	ldr	r0, [r1, #0]
 8002bf8:	b95c      	cbnz	r4, 8002c12 <gpio_stm32_manage_callback+0x2a>
 8002bfa:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 8002bfc:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002bfe:	42a1      	cmp	r1, r4
 8002c00:	d100      	bne.n	8002c04 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8002c02:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002c04:	2000      	movs	r0, #0
 8002c06:	6008      	str	r0, [r1, #0]
	if (set) {
 8002c08:	b972      	cbnz	r2, 8002c28 <gpio_stm32_manage_callback+0x40>
	return 0;
 8002c0a:	2000      	movs	r0, #0
}
 8002c0c:	bd30      	pop	{r4, r5, pc}
 8002c0e:	4628      	mov	r0, r5
 8002c10:	e7ef      	b.n	8002bf2 <gpio_stm32_manage_callback+0xa>
 8002c12:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002c14:	68d8      	ldr	r0, [r3, #12]
 8002c16:	4281      	cmp	r1, r0
	list->tail = node;
 8002c18:	bf08      	it	eq
 8002c1a:	60dc      	streq	r4, [r3, #12]
}
 8002c1c:	e7f2      	b.n	8002c04 <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8002c1e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c20:	4604      	mov	r4, r0
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	d1f3      	bne.n	8002c0e <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8002c26:	b13a      	cbz	r2, 8002c38 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8002c28:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8002c2a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8002c2c:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 8002c2e:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d1ea      	bne.n	8002c0a <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8002c34:	60d9      	str	r1, [r3, #12]
}
 8002c36:	e7e9      	b.n	8002c0c <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8002c38:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8002c3c:	e7e6      	b.n	8002c0c <gpio_stm32_manage_callback+0x24>

08002c3e <gpio_stm32_configure>:
{
 8002c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8002c40:	f002 0530 	and.w	r5, r2, #48	; 0x30
	if (mode == STM32_MODER_ANALOG_MODE) {
 8002c44:	2d30      	cmp	r5, #48	; 0x30
  SET_BIT(GPIOx->ASCR, PinMask);
 8002c46:	bf08      	it	eq
 8002c48:	6ac6      	ldreq	r6, [r0, #44]	; 0x2c
	pinval = 1 << pin;
 8002c4a:	f04f 0401 	mov.w	r4, #1
 8002c4e:	fa04 f401 	lsl.w	r4, r4, r1
 8002c52:	bf04      	itt	eq
 8002c54:	4326      	orreq	r6, r4
 8002c56:	62c6      	streq	r6, [r0, #44]	; 0x2c
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c58:	6847      	ldr	r7, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002c5a:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8002c5e:	ea27 0704 	bic.w	r7, r7, r4
 8002c62:	408e      	lsls	r6, r1
 8002c64:	433e      	orrs	r6, r7
 8002c66:	6046      	str	r6, [r0, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8002c6c:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002c70:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8002c74:	f04f 0e03 	mov.w	lr, #3
 8002c78:	007f      	lsls	r7, r7, #1
 8002c7a:	fa0e f707 	lsl.w	r7, lr, r7
 8002c7e:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8002c86:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002c8a:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8002c8e:	007f      	lsls	r7, r7, #1
 8002c90:	40be      	lsls	r6, r7
 8002c92:	ea46 060c 	orr.w	r6, r6, ip
 8002c96:	6086      	str	r6, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 8002c9c:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ca0:	68c7      	ldr	r7, [r0, #12]
 8002ca2:	0076      	lsls	r6, r6, #1
 8002ca4:	fa0e f606 	lsl.w	r6, lr, r6
 8002ca8:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 8002cb0:	fab6 f686 	clz	r6, r6
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002cb4:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002cb8:	0076      	lsls	r6, r6, #1
 8002cba:	40b2      	lsls	r2, r6
 8002cbc:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8002cbe:	2d20      	cmp	r5, #32
 8002cc0:	60c2      	str	r2, [r0, #12]
 8002cc2:	d115      	bne.n	8002cf0 <gpio_stm32_configure+0xb2>
		if (pin < 8) {
 8002cc4:	2907      	cmp	r1, #7
 8002cc6:	dc2c      	bgt.n	8002d22 <gpio_stm32_configure+0xe4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002ccc:	6a01      	ldr	r1, [r0, #32]
  if (value == 0U)
 8002cce:	b332      	cbz	r2, 8002d1e <gpio_stm32_configure+0xe0>
  return __builtin_clz(value);
 8002cd0:	fab2 f282 	clz	r2, r2
 8002cd4:	0092      	lsls	r2, r2, #2
 8002cd6:	260f      	movs	r6, #15
 8002cd8:	fa06 f202 	lsl.w	r2, r6, r2
 8002cdc:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	fa94 f2a4 	rbit	r2, r4
  return __builtin_clz(value);
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	0092      	lsls	r2, r2, #2
 8002cea:	4093      	lsls	r3, r2
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6203      	str	r3, [r0, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 8002cf4:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002cf8:	6802      	ldr	r2, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	fa94 f4a4 	rbit	r4, r4
 8002cfe:	2103      	movs	r1, #3
 8002d00:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8002d02:	fab4 f484 	clz	r4, r4
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002d06:	092d      	lsrs	r5, r5, #4
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	0064      	lsls	r4, r4, #1
 8002d0e:	ea22 0303 	bic.w	r3, r2, r3
 8002d12:	fa05 f404 	lsl.w	r4, r5, r4
 8002d16:	431c      	orrs	r4, r3
 8002d18:	6004      	str	r4, [r0, #0]
}
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8002d1e:	462a      	mov	r2, r5
 8002d20:	e7d8      	b.n	8002cd4 <gpio_stm32_configure+0x96>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002d22:	0a22      	lsrs	r2, r4, #8
 8002d24:	6a46      	ldr	r6, [r0, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8002d2a:	b181      	cbz	r1, 8002d4e <gpio_stm32_configure+0x110>
  return __builtin_clz(value);
 8002d2c:	fab1 f181 	clz	r1, r1
 8002d30:	0089      	lsls	r1, r1, #2
 8002d32:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002d38:	fab2 f282 	clz	r2, r2
 8002d3c:	fa07 f101 	lsl.w	r1, r7, r1
 8002d40:	0092      	lsls	r2, r2, #2
 8002d42:	ea26 0101 	bic.w	r1, r6, r1
 8002d46:	4093      	lsls	r3, r2
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6243      	str	r3, [r0, #36]	; 0x24
}
 8002d4c:	e7d0      	b.n	8002cf0 <gpio_stm32_configure+0xb2>
    return 32U;
 8002d4e:	4629      	mov	r1, r5
 8002d50:	e7ee      	b.n	8002d30 <gpio_stm32_configure+0xf2>

08002d52 <gpio_stm32_config>:
{
 8002d52:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8002d54:	059a      	lsls	r2, r3, #22
{
 8002d56:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8002d58:	6840      	ldr	r0, [r0, #4]
	if ((flags & GPIO_OUTPUT) != 0) {
 8002d5a:	d519      	bpl.n	8002d90 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002d5c:	079c      	lsls	r4, r3, #30
 8002d5e:	d510      	bpl.n	8002d82 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002d60:	075a      	lsls	r2, r3, #29
 8002d62:	d52d      	bpl.n	8002dc0 <gpio_stm32_config+0x6e>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002d64:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002d66:	06dc      	lsls	r4, r3, #27
 8002d68:	d50d      	bpl.n	8002d86 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002d6e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002d72:	6844      	ldr	r4, [r0, #4]
 8002d74:	d11b      	bne.n	8002dae <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002d76:	055b      	lsls	r3, r3, #21
 8002d78:	d513      	bpl.n	8002da2 <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8002d7e:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8002d80:	e00f      	b.n	8002da2 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002d82:	2210      	movs	r2, #16
 8002d84:	e7ef      	b.n	8002d66 <gpio_stm32_config+0x14>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002d86:	069c      	lsls	r4, r3, #26
 8002d88:	d5f1      	bpl.n	8002d6e <gpio_stm32_config+0x1c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002d8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002d8e:	e7ee      	b.n	8002d6e <gpio_stm32_config+0x1c>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002d90:	05dc      	lsls	r4, r3, #23
 8002d92:	d510      	bpl.n	8002db6 <gpio_stm32_config+0x64>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002d94:	06da      	lsls	r2, r3, #27
 8002d96:	d410      	bmi.n	8002dba <gpio_stm32_config+0x68>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002d98:	f013 0220 	ands.w	r2, r3, #32
 8002d9c:	bf18      	it	ne
 8002d9e:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 8002da2:	6840      	ldr	r0, [r0, #4]
 8002da4:	2300      	movs	r3, #0
 8002da6:	f7ff ff4a 	bl	8002c3e <gpio_stm32_configure>
 8002daa:	2000      	movs	r0, #0
}
 8002dac:	bd10      	pop	{r4, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002dae:	2301      	movs	r3, #1
 8002db0:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8002db2:	61a3      	str	r3, [r4, #24]
	return 0;
 8002db4:	e7f5      	b.n	8002da2 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8002db6:	2230      	movs	r2, #48	; 0x30
 8002db8:	e7f3      	b.n	8002da2 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbe:	e7f0      	b.n	8002da2 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8002dc0:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return err;
 8002dc4:	e7f2      	b.n	8002dac <gpio_stm32_config+0x5a>

08002dc6 <uart_stm32_set_baudrate>:
	if (clock_control_get_rate(data->clock,
 8002dc6:	68c3      	ldr	r3, [r0, #12]
{
 8002dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dca:	460c      	mov	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002dcc:	6841      	ldr	r1, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8002dce:	6858      	ldr	r0, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002dd0:	f851 5b08 	ldr.w	r5, [r1], #8
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
 8002dd4:	6883      	ldr	r3, [r0, #8]
 8002dd6:	aa01      	add	r2, sp, #4
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	db06      	blt.n	8002dee <uart_stm32_set_baudrate+0x28>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002de0:	9b01      	ldr	r3, [sp, #4]
 8002de2:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8002de6:	fbb3 f3f4 	udiv	r3, r3, r4
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	60eb      	str	r3, [r5, #12]
}
 8002dee:	b003      	add	sp, #12
 8002df0:	bd30      	pop	{r4, r5, pc}

08002df2 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8002df2:	68c3      	ldr	r3, [r0, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002df8:	6843      	ldr	r3, [r0, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002dfc:	6813      	ldr	r3, [r2, #0]
 8002dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d028      	beq.n	8002e5a <uart_stm32_config_get+0x68>
		return UART_CFG_PARITY_NONE;
 8002e08:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8002e0c:	4243      	negs	r3, r0
 8002e0e:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8002e10:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002e12:	6853      	ldr	r3, [r2, #4]
 8002e14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1c:	d01f      	beq.n	8002e5e <uart_stm32_config_get+0x6c>
 8002e1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e22:	d01e      	beq.n	8002e62 <uart_stm32_config_get+0x70>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf14      	ite	ne
 8002e28:	2303      	movne	r3, #3
 8002e2a:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8002e2c:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	switch (db) {
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e38:	d015      	beq.n	8002e66 <uart_stm32_config_get+0x74>
 8002e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		return UART_CFG_DATA_BITS_7;
 8002e3e:	bf14      	ite	ne
 8002e40:	2303      	movne	r3, #3
 8002e42:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8002e44:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002e46:	6893      	ldr	r3, [r2, #8]
 8002e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8002e4c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8002e50:	4253      	negs	r3, r2
 8002e52:	4153      	adcs	r3, r2
 8002e54:	71cb      	strb	r3, [r1, #7]
}
 8002e56:	2000      	movs	r0, #0
 8002e58:	4770      	bx	lr
	switch (parity) {
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e7d8      	b.n	8002e10 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e7e4      	b.n	8002e2c <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8002e62:	2302      	movs	r3, #2
 8002e64:	e7e2      	b.n	8002e2c <uart_stm32_config_get+0x3a>
	switch (db) {
 8002e66:	2304      	movs	r3, #4
 8002e68:	e7ec      	b.n	8002e44 <uart_stm32_config_get+0x52>

08002e6a <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002e6a:	6843      	ldr	r3, [r0, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	0612      	lsls	r2, r2, #24
 8002e72:	d5fc      	bpl.n	8002e6e <uart_stm32_poll_out+0x4>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002e74:	2240      	movs	r2, #64	; 0x40
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8002e76:	b289      	uxth	r1, r1
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002e78:	621a      	str	r2, [r3, #32]
  USARTx->TDR = Value;
 8002e7a:	8519      	strh	r1, [r3, #40]	; 0x28
}
 8002e7c:	4770      	bx	lr

08002e7e <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002e7e:	6843      	ldr	r3, [r0, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002e82:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8002e84:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8002e86:	07d2      	lsls	r2, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002e88:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002e8a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8002e8e:	bf48      	it	mi
 8002e90:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002e94:	0791      	lsls	r1, r2, #30
		err |= UART_ERROR_FRAMING;
 8002e96:	bf48      	it	mi
 8002e98:	f040 0004 	orrmi.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 8002e9c:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002e9e:	bf44      	itt	mi
 8002ea0:	2208      	movmi	r2, #8
 8002ea2:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8002ea4:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8002ea6:	bf44      	itt	mi
 8002ea8:	2201      	movmi	r2, #1
 8002eaa:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8002eac:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002eae:	bf44      	itt	mi
 8002eb0:	2202      	movmi	r2, #2
 8002eb2:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	4770      	bx	lr

08002eba <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002eba:	6843      	ldr	r3, [r0, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002ec2:	bf44      	itt	mi
 8002ec4:	2208      	movmi	r2, #8
 8002ec6:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002ecc:	bf43      	ittte	mi
 8002ece:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 8002ed0:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8002ed2:	2000      	movmi	r0, #0
		return -1;
 8002ed4:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8002ed8:	4770      	bx	lr

08002eda <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002eda:	680b      	ldr	r3, [r1, #0]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	3301      	adds	r3, #1
 8002ee0:	fbb0 f0f3 	udiv	r0, r0, r3
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8002ee4:	684b      	ldr	r3, [r1, #4]
 8002ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eea:	4358      	muls	r0, r3
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 8002eec:	688b      	ldr	r3, [r1, #8]
 8002eee:	0e5b      	lsrs	r3, r3, #25
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	005b      	lsls	r3, r3, #1
}
 8002ef4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ef8:	4770      	bx	lr

08002efa <arch_system_halt>:
 8002efa:	f04f 0210 	mov.w	r2, #16
 8002efe:	f3ef 8311 	mrs	r3, BASEPRI
 8002f02:	f382 8811 	msr	BASEPRI, r2
 8002f06:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8002f0a:	e7fe      	b.n	8002f0a <arch_system_halt+0x10>

08002f0c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8002f0c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8002f0e:	f7ff fff4 	bl	8002efa <arch_system_halt>

08002f12 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8002f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f14:	4605      	mov	r5, r0
 8002f16:	460e      	mov	r6, r1
 8002f18:	f04f 0310 	mov.w	r3, #16
 8002f1c:	f3ef 8711 	mrs	r7, BASEPRI
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 8002f28:	f7ff f9ee 	bl	8002308 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8002f2c:	4631      	mov	r1, r6
 8002f2e:	4604      	mov	r4, r0
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7ff ffeb 	bl	8002f0c <k_sys_fatal_error_handler>
	__asm__ volatile(
 8002f36:	f387 8811 	msr	BASEPRI, r7
 8002f3a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8002f3e:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 8002f40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f44:	f7fe bb12 	b.w	800156c <z_impl_k_thread_abort>

08002f48 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002f48:	4603      	mov	r3, r0
 8002f4a:	b920      	cbnz	r0, 8002f56 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f4c:	f3ef 8205 	mrs	r2, IPSR
 8002f50:	b90a      	cbnz	r2, 8002f56 <z_reschedule_irqlock+0xe>
 8002f52:	f7fe b8d7 	b.w	8001104 <arch_swap>
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
}
 8002f5e:	4770      	bx	lr

08002f60 <z_reschedule_unlocked>:
	__asm__ volatile(
 8002f60:	f04f 0310 	mov.w	r3, #16
 8002f64:	f3ef 8011 	mrs	r0, BASEPRI
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8002f70:	f7ff bfea 	b.w	8002f48 <z_reschedule_irqlock>

08002f74 <unpend_thread_no_timeout>:
{
 8002f74:	4601      	mov	r1, r0
 8002f76:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8002f78:	6880      	ldr	r0, [r0, #8]
 8002f7a:	f7fe ffdd 	bl	8001f38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8002f7e:	7b4b      	ldrb	r3, [r1, #13]
 8002f80:	f023 0302 	bic.w	r3, r3, #2
 8002f84:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	608b      	str	r3, [r1, #8]
}
 8002f8a:	bd08      	pop	{r3, pc}

08002f8c <z_priq_dumb_best>:
	return list->head == list;
 8002f8c:	6803      	ldr	r3, [r0, #0]
}
 8002f8e:	4298      	cmp	r0, r3
 8002f90:	bf14      	ite	ne
 8002f92:	4618      	movne	r0, r3
 8002f94:	2000      	moveq	r0, #0
 8002f96:	4770      	bx	lr

08002f98 <z_ready_thread>:
{
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	f04f 0310 	mov.w	r3, #16
 8002f9e:	f3ef 8411 	mrs	r4, BASEPRI
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
 8002faa:	f7ff f81f 	bl	8001fec <ready_thread>
	__asm__ volatile(
 8002fae:	f384 8811 	msr	BASEPRI, r4
 8002fb2:	f3bf 8f6f 	isb	sy
}
 8002fb6:	bd10      	pop	{r4, pc}

08002fb8 <z_thread_timeout>:
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4604      	mov	r4, r0
	__asm__ volatile(
 8002fbc:	f04f 0310 	mov.w	r3, #16
 8002fc0:	f3ef 8611 	mrs	r6, BASEPRI
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 8002fcc:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
 8002fd0:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
 8002fd4:	b113      	cbz	r3, 8002fdc <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	f7ff ffcc 	bl	8002f74 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8002fdc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8002fe0:	f023 0314 	bic.w	r3, r3, #20
 8002fe4:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f7fe ffff 	bl	8001fec <ready_thread>
	__asm__ volatile(
 8002fee:	f386 8811 	msr	BASEPRI, r6
 8002ff2:	f3bf 8f6f 	isb	sy
}
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}

08002ff8 <z_abort_timeout>:
{
 8002ff8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002ffa:	f04f 0210 	mov.w	r2, #16
 8002ffe:	f3ef 8411 	mrs	r4, BASEPRI
 8003002:	f382 8811 	msr	BASEPRI, r2
 8003006:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800300a:	6803      	ldr	r3, [r0, #0]
 800300c:	b13b      	cbz	r3, 800301e <z_abort_timeout+0x26>
			remove_timeout(to);
 800300e:	f7ff fa43 	bl	8002498 <remove_timeout>
			ret = 0;
 8003012:	2000      	movs	r0, #0
	__asm__ volatile(
 8003014:	f384 8811 	msr	BASEPRI, r4
 8003018:	f3bf 8f6f 	isb	sy
}
 800301c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 800301e:	f06f 0015 	mvn.w	r0, #21
 8003022:	e7f7      	b.n	8003014 <z_abort_timeout+0x1c>

08003024 <z_get_next_timeout_expiry>:
{
 8003024:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003026:	f04f 0310 	mov.w	r3, #16
 800302a:	f3ef 8411 	mrs	r4, BASEPRI
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8003036:	f7ff fa49 	bl	80024cc <next_timeout>
	__asm__ volatile(
 800303a:	f384 8811 	msr	BASEPRI, r4
 800303e:	f3bf 8f6f 	isb	sy
}
 8003042:	bd10      	pop	{r4, pc}

08003044 <z_set_timeout_expiry>:
{
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	460d      	mov	r5, r1
	__asm__ volatile(
 800304a:	f04f 0310 	mov.w	r3, #16
 800304e:	f3ef 8611 	mrs	r6, BASEPRI
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 800305a:	f7ff fa37 	bl	80024cc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800305e:	2801      	cmp	r0, #1
 8003060:	dd05      	ble.n	800306e <z_set_timeout_expiry+0x2a>
 8003062:	42a0      	cmp	r0, r4
 8003064:	dd03      	ble.n	800306e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
 8003066:	4629      	mov	r1, r5
 8003068:	4620      	mov	r0, r4
 800306a:	f7fd ffc9 	bl	8001000 <z_clock_set_timeout>
	__asm__ volatile(
 800306e:	f386 8811 	msr	BASEPRI, r6
 8003072:	f3bf 8f6f 	isb	sy
}
 8003076:	bd70      	pop	{r4, r5, r6, pc}

08003078 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	4604      	mov	r4, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
 800307c:	2500      	movs	r5, #0
	__asm__ volatile(
 800307e:	f04f 0210 	mov.w	r2, #16
 8003082:	f3ef 8311 	mrs	r3, BASEPRI
 8003086:	f382 8811 	msr	BASEPRI, r2
 800308a:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
 800308e:	6920      	ldr	r0, [r4, #16]
		if (to_abort) {
 8003090:	b188      	cbz	r0, 80030b6 <idle+0x3e>
			cpu->pending_abort = NULL;
 8003092:	6125      	str	r5, [r4, #16]
	__asm__ volatile(
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
 800309c:	f7ff f8a6 	bl	80021ec <z_thread_single_abort>
	__asm__ volatile(
 80030a0:	f04f 0310 	mov.w	r3, #16
 80030a4:	f3ef 8011 	mrs	r0, BASEPRI
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80030b0:	f7ff ff4a 	bl	8002f48 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
 80030b4:	e7e3      	b.n	800307e <idle+0x6>
		k_busy_wait(100);
		k_yield();
#else

#ifdef CONFIG_SYS_CLOCK_EXISTS
		int32_t ticks = z_get_next_timeout_expiry();
 80030b6:	f7ff ffb5 	bl	8003024 <z_get_next_timeout_expiry>
		 * that the system should not enter a tickless idle for
		 * periods less than that.  This seems... silly, given that it
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 80030ba:	2101      	movs	r1, #1
 80030bc:	2802      	cmp	r0, #2
 80030be:	bfd8      	it	le
 80030c0:	4608      	movle	r0, r1
 80030c2:	f7ff ffbf 	bl	8003044 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 80030c6:	f7fe f8ef 	bl	80012a8 <arch_cpu_idle>
}
 80030ca:	e7d8      	b.n	800307e <idle+0x6>

080030cc <k_heap_init>:
{
 80030cc:	b410      	push	{r4}
 80030ce:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 80030d2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 80030d6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 80030d8:	f7ff bbcf 	b.w	800287a <sys_heap_init>

080030dc <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 80030dc:	4770      	bx	lr
